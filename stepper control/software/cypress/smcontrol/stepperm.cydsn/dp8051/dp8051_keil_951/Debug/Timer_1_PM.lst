C51 COMPILER V9.51   TIMER_1_PM                                                            05/22/2017 14:28:04 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TIMER_1_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Timer_1_PM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\Timer_1_PM.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR
                    -(.\DP8051\DP8051_Keil_951\Debug/Timer_1_PM.lst) OT(5) OJ(.\DP8051\DP8051_Keil_951\Debug\Timer_1_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Timer_1_PM.c
   3          * Version 2.70
   4          *
   5          *  Description:
   6          *     This file provides the power management source code to API for the
   7          *     Timer.
   8          *
   9          *   Note:
  10          *     None
  11          *
  12          *******************************************************************************
  13          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include "Timer_1.h"
  20          
  21          static Timer_1_backupStruct Timer_1_backup;
  22          
  23          
  24          /*******************************************************************************
  25          * Function Name: Timer_1_SaveConfig
  26          ********************************************************************************
  27          *
  28          * Summary:
  29          *     Save the current user configuration
  30          *
  31          * Parameters:
  32          *  void
  33          *
  34          * Return:
  35          *  void
  36          *
  37          * Global variables:
  38          *  Timer_1_backup:  Variables of this global structure are modified to
  39          *  store the values of non retention configuration registers when Sleep() API is
  40          *  called.
  41          *
  42          *******************************************************************************/
  43          void Timer_1_SaveConfig(void) 
  44          {
  45   1          #if (!Timer_1_UsingFixedFunction)
                      Timer_1_backup.TimerUdb = Timer_1_ReadCounter();
                      Timer_1_backup.InterruptMaskValue = Timer_1_STATUS_MASK;
                      #if (Timer_1_UsingHWCaptureCounter)
                          Timer_1_backup.TimerCaptureCounter = Timer_1_ReadCaptureCount();
                      #endif /* Back Up capture counter register  */
              
                      #if(!Timer_1_UDB_CONTROL_REG_REMOVED)
                          Timer_1_backup.TimerControlRegister = Timer_1_ReadControlRegister();
C51 COMPILER V9.51   TIMER_1_PM                                                            05/22/2017 14:28:04 PAGE 2   

                      #endif /* Backup the enable state of the Timer component */
                  #endif /* Backup non retention registers in UDB implementation. All fixed function registers are reten
             -tion */
  56   1      }
  57          
  58          
  59          /*******************************************************************************
  60          * Function Name: Timer_1_RestoreConfig
  61          ********************************************************************************
  62          *
  63          * Summary:
  64          *  Restores the current user configuration.
  65          *
  66          * Parameters:
  67          *  void
  68          *
  69          * Return:
  70          *  void
  71          *
  72          * Global variables:
  73          *  Timer_1_backup:  Variables of this global structure are used to
  74          *  restore the values of non retention registers on wakeup from sleep mode.
  75          *
  76          *******************************************************************************/
  77          void Timer_1_RestoreConfig(void) 
  78          {   
  79   1          #if (!Timer_1_UsingFixedFunction)
              
                      Timer_1_WriteCounter(Timer_1_backup.TimerUdb);
                      Timer_1_STATUS_MASK =Timer_1_backup.InterruptMaskValue;
                      #if (Timer_1_UsingHWCaptureCounter)
                          Timer_1_SetCaptureCount(Timer_1_backup.TimerCaptureCounter);
                      #endif /* Restore Capture counter register*/
              
                      #if(!Timer_1_UDB_CONTROL_REG_REMOVED)
                          Timer_1_WriteControlRegister(Timer_1_backup.TimerControlRegister);
                      #endif /* Restore the enable state of the Timer component */
                  #endif /* Restore non retention registers in the UDB implementation only */
  91   1      }
  92          
  93          
  94          /*******************************************************************************
  95          * Function Name: Timer_1_Sleep
  96          ********************************************************************************
  97          *
  98          * Summary:
  99          *     Stop and Save the user configuration
 100          *
 101          * Parameters:
 102          *  void
 103          *
 104          * Return:
 105          *  void
 106          *
 107          * Global variables:
 108          *  Timer_1_backup.TimerEnableState:  Is modified depending on the
 109          *  enable state of the block before entering sleep mode.
 110          *
 111          *******************************************************************************/
 112          void Timer_1_Sleep(void) 
 113          {
 114   1          #if(!Timer_1_UDB_CONTROL_REG_REMOVED)
C51 COMPILER V9.51   TIMER_1_PM                                                            05/22/2017 14:28:04 PAGE 3   

 115   1              /* Save Counter's enable state */
 116   1              if(Timer_1_CTRL_ENABLE == (Timer_1_CONTROL & Timer_1_CTRL_ENABLE))
 117   1              {
 118   2                  /* Timer is enabled */
 119   2                  Timer_1_backup.TimerEnableState = 1u;
 120   2              }
 121   1              else
 122   1              {
 123   2                  /* Timer is disabled */
 124   2                  Timer_1_backup.TimerEnableState = 0u;
 125   2              }
 126   1          #endif /* Back up enable state from the Timer control register */
 127   1          Timer_1_Stop();
 128   1          Timer_1_SaveConfig();
 129   1      }
 130          
 131          
 132          /*******************************************************************************
 133          * Function Name: Timer_1_Wakeup
 134          ********************************************************************************
 135          *
 136          * Summary:
 137          *  Restores and enables the user configuration
 138          *
 139          * Parameters:
 140          *  void
 141          *
 142          * Return:
 143          *  void
 144          *
 145          * Global variables:
 146          *  Timer_1_backup.enableState:  Is used to restore the enable state of
 147          *  block on wakeup from sleep mode.
 148          *
 149          *******************************************************************************/
 150          void Timer_1_Wakeup(void) 
 151          {
 152   1          Timer_1_RestoreConfig();
 153   1          #if(!Timer_1_UDB_CONTROL_REG_REMOVED)
 154   1              if(Timer_1_backup.TimerEnableState == 1u)
 155   1              {     /* Enable Timer's operation */
 156   2                      Timer_1_Enable();
 157   2              } /* Do nothing if Timer was disabled before */
 158   1          #endif /* Remove this code section if Control register is removed */
 159   1      }
 160          
 161          
 162          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     43    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.51   TIMER_1_PM                                                            05/22/2017 14:28:04 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
