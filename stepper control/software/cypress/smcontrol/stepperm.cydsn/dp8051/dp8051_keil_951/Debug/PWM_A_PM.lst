C51 COMPILER V9.51   PWM_A_PM                                                              05/22/2017 14:28:03 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE PWM_A_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\PWM_A_PM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\PWM_A_PM.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.
                    -\DP8051\DP8051_Keil_951\Debug/PWM_A_PM.lst) OT(5) OJ(.\DP8051\DP8051_Keil_951\Debug\PWM_A_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: PWM_A_PM.c
   3          * Version 3.30
   4          *
   5          * Description:
   6          *  This file provides the power management source code to API for the
   7          *  PWM.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "PWM_A.h"
  19          
  20          static PWM_A_backupStruct PWM_A_backup;
  21          
  22          
  23          /*******************************************************************************
  24          * Function Name: PWM_A_SaveConfig
  25          ********************************************************************************
  26          *
  27          * Summary:
  28          *  Saves the current user configuration of the component.
  29          *
  30          * Parameters:
  31          *  None
  32          *
  33          * Return:
  34          *  None
  35          *
  36          * Global variables:
  37          *  PWM_A_backup:  Variables of this global structure are modified to
  38          *  store the values of non retention configuration registers when Sleep() API is
  39          *  called.
  40          *
  41          *******************************************************************************/
  42          void PWM_A_SaveConfig(void) 
  43          {
  44   1      
  45   1          #if(!PWM_A_UsingFixedFunction)
  46   1              #if(!PWM_A_PWMModeIsCenterAligned)
  47   1                  PWM_A_backup.PWMPeriod = PWM_A_ReadPeriod();
  48   1              #endif /* (!PWM_A_PWMModeIsCenterAligned) */
  49   1              PWM_A_backup.PWMUdb = PWM_A_ReadCounter();
  50   1              #if (PWM_A_UseStatus)
  51   1                  PWM_A_backup.InterruptMaskValue = PWM_A_STATUS_MASK;
  52   1              #endif /* (PWM_A_UseStatus) */
  53   1      
C51 COMPILER V9.51   PWM_A_PM                                                              05/22/2017 14:28:03 PAGE 2   

  54   1              #if(PWM_A_DeadBandMode == PWM_A__B_PWM__DBM_256_CLOCKS || \
  55   1                  PWM_A_DeadBandMode == PWM_A__B_PWM__DBM_2_4_CLOCKS)
                          PWM_A_backup.PWMdeadBandValue = PWM_A_ReadDeadTime();
                      #endif /*  deadband count is either 2-4 clocks or 256 clocks */
  58   1      
  59   1              #if(PWM_A_KillModeMinTime)
                           PWM_A_backup.PWMKillCounterPeriod = PWM_A_ReadKillTime();
                      #endif /* (PWM_A_KillModeMinTime) */
  62   1      
  63   1              #if(PWM_A_UseControl)
  64   1                  PWM_A_backup.PWMControlRegister = PWM_A_ReadControlRegister();
  65   1              #endif /* (PWM_A_UseControl) */
  66   1          #endif  /* (!PWM_A_UsingFixedFunction) */
  67   1      }
  68          
  69          
  70          /*******************************************************************************
  71          * Function Name: PWM_A_RestoreConfig
  72          ********************************************************************************
  73          *
  74          * Summary:
  75          *  Restores the current user configuration of the component.
  76          *
  77          * Parameters:
  78          *  None
  79          *
  80          * Return:
  81          *  None
  82          *
  83          * Global variables:
  84          *  PWM_A_backup:  Variables of this global structure are used to
  85          *  restore the values of non retention registers on wakeup from sleep mode.
  86          *
  87          *******************************************************************************/
  88          void PWM_A_RestoreConfig(void) 
  89          {
  90   1              #if(!PWM_A_UsingFixedFunction)
  91   1                  #if(!PWM_A_PWMModeIsCenterAligned)
  92   1                      PWM_A_WritePeriod(PWM_A_backup.PWMPeriod);
  93   1                  #endif /* (!PWM_A_PWMModeIsCenterAligned) */
  94   1      
  95   1                  PWM_A_WriteCounter(PWM_A_backup.PWMUdb);
  96   1      
  97   1                  #if (PWM_A_UseStatus)
  98   1                      PWM_A_STATUS_MASK = PWM_A_backup.InterruptMaskValue;
  99   1                  #endif /* (PWM_A_UseStatus) */
 100   1      
 101   1                  #if(PWM_A_DeadBandMode == PWM_A__B_PWM__DBM_256_CLOCKS || \
 102   1                      PWM_A_DeadBandMode == PWM_A__B_PWM__DBM_2_4_CLOCKS)
                              PWM_A_WriteDeadTime(PWM_A_backup.PWMdeadBandValue);
                          #endif /* deadband count is either 2-4 clocks or 256 clocks */
 105   1      
 106   1                  #if(PWM_A_KillModeMinTime)
                              PWM_A_WriteKillTime(PWM_A_backup.PWMKillCounterPeriod);
                          #endif /* (PWM_A_KillModeMinTime) */
 109   1      
 110   1                  #if(PWM_A_UseControl)
 111   1                      PWM_A_WriteControlRegister(PWM_A_backup.PWMControlRegister);
 112   1                  #endif /* (PWM_A_UseControl) */
 113   1              #endif  /* (!PWM_A_UsingFixedFunction) */
 114   1          }
 115          
C51 COMPILER V9.51   PWM_A_PM                                                              05/22/2017 14:28:03 PAGE 3   

 116          
 117          /*******************************************************************************
 118          * Function Name: PWM_A_Sleep
 119          ********************************************************************************
 120          *
 121          * Summary:
 122          *  Disables block's operation and saves the user configuration. Should be called
 123          *  just prior to entering sleep.
 124          *
 125          * Parameters:
 126          *  None
 127          *
 128          * Return:
 129          *  None
 130          *
 131          * Global variables:
 132          *  PWM_A_backup.PWMEnableState:  Is modified depending on the enable
 133          *  state of the block before entering sleep mode.
 134          *
 135          *******************************************************************************/
 136          void PWM_A_Sleep(void) 
 137          {
 138   1          #if(PWM_A_UseControl)
 139   1              if(PWM_A_CTRL_ENABLE == (PWM_A_CONTROL & PWM_A_CTRL_ENABLE))
 140   1              {
 141   2                  /*Component is enabled */
 142   2                  PWM_A_backup.PWMEnableState = 1u;
 143   2              }
 144   1              else
 145   1              {
 146   2                  /* Component is disabled */
 147   2                  PWM_A_backup.PWMEnableState = 0u;
 148   2              }
 149   1          #endif /* (PWM_A_UseControl) */
 150   1      
 151   1          /* Stop component */
 152   1          PWM_A_Stop();
 153   1      
 154   1          /* Save registers configuration */
 155   1          PWM_A_SaveConfig();
 156   1      }
 157          
 158          
 159          /*******************************************************************************
 160          * Function Name: PWM_A_Wakeup
 161          ********************************************************************************
 162          *
 163          * Summary:
 164          *  Restores and enables the user configuration. Should be called just after
 165          *  awaking from sleep.
 166          *
 167          * Parameters:
 168          *  None
 169          *
 170          * Return:
 171          *  None
 172          *
 173          * Global variables:
 174          *  PWM_A_backup.pwmEnable:  Is used to restore the enable state of
 175          *  block on wakeup from sleep mode.
 176          *
 177          *******************************************************************************/
C51 COMPILER V9.51   PWM_A_PM                                                              05/22/2017 14:28:03 PAGE 4   

 178          void PWM_A_Wakeup(void) 
 179          {
 180   1           /* Restore registers values */
 181   1          PWM_A_RestoreConfig();
 182   1      
 183   1          if(PWM_A_backup.PWMEnableState != 0u)
 184   1          {
 185   2              /* Enable component's operation */
 186   2              PWM_A_Enable();
 187   2          } /* Do nothing if component's block was disabled before */
 188   1      
 189   1      }
 190          
 191          
 192          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    106    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
