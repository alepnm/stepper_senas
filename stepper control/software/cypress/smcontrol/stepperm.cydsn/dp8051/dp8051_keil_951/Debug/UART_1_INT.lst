C51 COMPILER V9.51   UART_1_INT                                                            05/22/2017 14:28:05 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE UART_1_INT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\UART_1_INT.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\UART_1_INT.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR
                    -(.\DP8051\DP8051_Keil_951\Debug/UART_1_INT.lst) OT(5) OJ(.\DP8051\DP8051_Keil_951\Debug\UART_1_INT.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: UART_1INT.c
   3          * Version 2.50
   4          *
   5          * Description:
   6          *  This file provides all Interrupt Service functionality of the UART component
   7          *
   8          ********************************************************************************
   9          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  10          * You may use this file only in accordance with the license, terms, conditions,
  11          * disclaimers, and limitations in the end user license agreement accompanying
  12          * the software package with which this file was provided.
  13          *******************************************************************************/
  14          
  15          #include "UART_1.h"
  16          
  17          
  18          
  19          /***************************************
  20          * Custom Declarations
  21          ***************************************/
  22          /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  23          
  24          /* `#END` */
  25          
  26          #if (UART_1_RX_INTERRUPT_ENABLED && (UART_1_RX_ENABLED || UART_1_HD_ENABLED))
  27              /*******************************************************************************
  28              * Function Name: UART_1_RXISR
  29              ********************************************************************************
  30              *
  31              * Summary:
  32              *  Interrupt Service Routine for RX portion of the UART
  33              *
  34              * Parameters:
  35              *  None.
  36              *
  37              * Return:
  38              *  None.
  39              *
  40              * Global Variables:
  41              *  UART_1_rxBuffer - RAM buffer pointer for save received data.
  42              *  UART_1_rxBufferWrite - cyclic index for write to rxBuffer,
  43              *     increments after each byte saved to buffer.
  44              *  UART_1_rxBufferRead - cyclic index for read from rxBuffer,
  45              *     checked to detect overflow condition.
  46              *  UART_1_rxBufferOverflow - software overflow flag. Set to one
  47              *     when UART_1_rxBufferWrite index overtakes
  48              *     UART_1_rxBufferRead index.
  49              *  UART_1_rxBufferLoopDetect - additional variable to detect overflow.
  50              *     Set to one when UART_1_rxBufferWrite is equal to
  51              *    UART_1_rxBufferRead
  52              *  UART_1_rxAddressMode - this variable contains the Address mode,
  53              *     selected in customizer or set by UART_SetRxAddressMode() API.
C51 COMPILER V9.51   UART_1_INT                                                            05/22/2017 14:28:05 PAGE 2   

  54              *  UART_1_rxAddressDetected - set to 1 when correct address received,
  55              *     and analysed to store following addressed data bytes to the buffer.
  56              *     When not correct address received, set to 0 to skip following data bytes.
  57              *
  58              *******************************************************************************/
  59              CY_ISR(UART_1_RXISR)
  60              {
  61   1              uint8 readData;
  62   1              uint8 readStatus;
  63   1              uint8 increment_pointer = 0u;
  64   1      
  65   1          #if(CY_PSOC3)
  66   1              uint8 int_en;
  67   1          #endif /* (CY_PSOC3) */
  68   1      
  69   1          #ifdef UART_1_RXISR_ENTRY_CALLBACK
                      UART_1_RXISR_EntryCallback();
                  #endif /* UART_1_RXISR_ENTRY_CALLBACK */
  72   1      
  73   1              /* User code required at start of ISR */
  74   1              /* `#START UART_1_RXISR_START` */
  75   1          extern uint8 RxFlag;
  76   1          extern void  RxData(void);
  77   1              /* `#END` */
  78   1      
  79   1          #if(CY_PSOC3)   /* Make sure nested interrupt is enabled */
  80   1              int_en = EA;
  81   1              CyGlobalIntEnable;
  82   1          #endif /* (CY_PSOC3) */
  83   1      
  84   1              do
  85   1              {
  86   2                  /* Read receiver status register */
  87   2                  readStatus = UART_1_RXSTATUS_REG;
  88   2                  /* Copy the same status to readData variable for backward compatibility support 
  89   2                  *  of the user code in UART_1_RXISR_ERROR` section. 
  90   2                  */
  91   2                  readData = readStatus;
  92   2      
  93   2                  if((readStatus & (UART_1_RX_STS_BREAK | 
  94   2                                  UART_1_RX_STS_PAR_ERROR |
  95   2                                  UART_1_RX_STS_STOP_ERROR | 
  96   2                                  UART_1_RX_STS_OVERRUN)) != 0u)
  97   2                  {
  98   3                      /* ERROR handling. */
  99   3                      UART_1_errorStatus |= readStatus & ( UART_1_RX_STS_BREAK | 
 100   3                                                                  UART_1_RX_STS_PAR_ERROR | 
 101   3                                                                  UART_1_RX_STS_STOP_ERROR | 
 102   3                                                                  UART_1_RX_STS_OVERRUN);
 103   3                      /* `#START UART_1_RXISR_ERROR` */
 104   3      
 105   3                      /* `#END` */
 106   3                      
 107   3                  #ifdef UART_1_RXISR_ERROR_CALLBACK
                              UART_1_RXISR_ERROR_Callback();
                          #endif /* UART_1_RXISR_ERROR_CALLBACK */
 110   3                  }
 111   2                  
 112   2                  if((readStatus & UART_1_RX_STS_FIFO_NOTEMPTY) != 0u)
 113   2                  {
 114   3                      /* Read data from the RX data register */
 115   3                      readData = UART_1_RXDATA_REG;
C51 COMPILER V9.51   UART_1_INT                                                            05/22/2017 14:28:05 PAGE 3   

 116   3                  #if (UART_1_RXHW_ADDRESS_ENABLED)
 117   3                      if(UART_1_rxAddressMode == (uint8)UART_1__B_UART__AM_SW_DETECT_TO_BUFFER)
 118   3                      {
 119   4                          if((readStatus & UART_1_RX_STS_MRKSPC) != 0u)
 120   4                          {
 121   5                              if ((readStatus & UART_1_RX_STS_ADDR_MATCH) != 0u)
 122   5                              {
 123   6                                  UART_1_rxAddressDetected = 1u;
 124   6                              }
 125   5                              else
 126   5                              {
 127   6                                  UART_1_rxAddressDetected = 0u;
 128   6                              }
 129   5                          }
 130   4                          if(UART_1_rxAddressDetected != 0u)
 131   4                          {   /* Store only addressed data */
 132   5                              UART_1_rxBuffer[UART_1_rxBufferWrite] = readData;
 133   5                              increment_pointer = 1u;
 134   5                          }
 135   4                      }
 136   3                      else /* Without software addressing */
 137   3                      {
 138   4                          UART_1_rxBuffer[UART_1_rxBufferWrite] = readData;
 139   4                          increment_pointer = 1u;
 140   4                      }
 141   3                  #else  /* Without addressing */
                              UART_1_rxBuffer[UART_1_rxBufferWrite] = readData;
                              increment_pointer = 1u;
                          #endif /* (UART_1_RXHW_ADDRESS_ENABLED) */
 145   3      
 146   3                      /* Do not increment buffer pointer when skip not addressed data */
 147   3                      if(increment_pointer != 0u)
 148   3                      {
 149   4                          if(UART_1_rxBufferLoopDetect != 0u)
 150   4                          {   /* Set Software Buffer status Overflow */
 151   5                              UART_1_rxBufferOverflow = 1u;
 152   5                          }
 153   4                          /* Set next pointer. */
 154   4                          UART_1_rxBufferWrite++;
 155   4      
 156   4                          /* Check pointer for a loop condition */
 157   4                          if(UART_1_rxBufferWrite >= UART_1_RX_BUFFER_SIZE)
 158   4                          {
 159   5                              UART_1_rxBufferWrite = 0u;
 160   5                          }
 161   4      
 162   4                          /* Detect pre-overload condition and set flag */
 163   4                          if(UART_1_rxBufferWrite == UART_1_rxBufferRead)
 164   4                          {
 165   5                              UART_1_rxBufferLoopDetect = 1u;
 166   5                              /* When Hardware Flow Control selected */
 167   5                              #if (UART_1_FLOW_CONTROL != 0u)
                                          /* Disable RX interrupt mask, it is enabled when user read data from the buffe
             -r using APIs */
                                          UART_1_RXSTATUS_MASK_REG  &= (uint8)~UART_1_RX_STS_FIFO_NOTEMPTY;
                                          CyIntClearPending(UART_1_RX_VECT_NUM);
                                          break; /* Break the reading of the FIFO loop, leave the data there for generat
             -ing RTS signal */
                                      #endif /* (UART_1_FLOW_CONTROL != 0u) */
 173   5                          }
 174   4                      }
 175   3                  }
C51 COMPILER V9.51   UART_1_INT                                                            05/22/2017 14:28:05 PAGE 4   

 176   2              }while((readStatus & UART_1_RX_STS_FIFO_NOTEMPTY) != 0u);
 177   1      
 178   1              /* User code required at end of ISR (Optional) */
 179   1              /* `#START UART_1_RXISR_END` */
 180   1              UART_1_GetRxInterruptSource();          // to clear the interrrupts
 181   1              RxFlag =1;
 182   1              RxData();
 183   1      
 184   1              /* `#END` */
 185   1      
 186   1          #ifdef UART_1_RXISR_EXIT_CALLBACK
                      UART_1_RXISR_ExitCallback();
                  #endif /* UART_1_RXISR_EXIT_CALLBACK */
 189   1      
 190   1          #if(CY_PSOC3)
 191   1              EA = int_en;
 192   1          #endif /* (CY_PSOC3) */
 193   1          }
 194              
 195          #endif /* (UART_1_RX_INTERRUPT_ENABLED && (UART_1_RX_ENABLED || UART_1_HD_ENABLED)) */
 196          
 197          
 198          #if (UART_1_TX_INTERRUPT_ENABLED && UART_1_TX_ENABLED)
                  /*******************************************************************************
                  * Function Name: UART_1_TXISR
                  ********************************************************************************
                  *
                  * Summary:
                  * Interrupt Service Routine for the TX portion of the UART
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  * Global Variables:
                  *  UART_1_txBuffer - RAM buffer pointer for transmit data from.
                  *  UART_1_txBufferRead - cyclic index for read and transmit data
                  *     from txBuffer, increments after each transmitted byte.
                  *  UART_1_rxBufferWrite - cyclic index for write to txBuffer,
                  *     checked to detect available for transmission bytes.
                  *
                  *******************************************************************************/
                  CY_ISR(UART_1_TXISR)
                  {
                  #if(CY_PSOC3)
                      uint8 int_en;
                  #endif /* (CY_PSOC3) */
              
                  #ifdef UART_1_TXISR_ENTRY_CALLBACK
                      UART_1_TXISR_EntryCallback();
                  #endif /* UART_1_TXISR_ENTRY_CALLBACK */
              
                      /* User code required at start of ISR */
                      /* `#START UART_1_TXISR_START` */
              
                      /* `#END` */
              
                  #if(CY_PSOC3)   /* Make sure nested interrupt is enabled */
                      int_en = EA;
                      CyGlobalIntEnable;
C51 COMPILER V9.51   UART_1_INT                                                            05/22/2017 14:28:05 PAGE 5   

                  #endif /* (CY_PSOC3) */
              
                      while((UART_1_txBufferRead != UART_1_txBufferWrite) &&
                           ((UART_1_TXSTATUS_REG & UART_1_TX_STS_FIFO_FULL) == 0u))
                      {
                          /* Check pointer wrap around */
                          if(UART_1_txBufferRead >= UART_1_TX_BUFFER_SIZE)
                          {
                              UART_1_txBufferRead = 0u;
                          }
              
                          UART_1_TXDATA_REG = UART_1_txBuffer[UART_1_txBufferRead];
              
                          /* Set next pointer */
                          UART_1_txBufferRead++;
                      }
              
                      /* User code required at end of ISR (Optional) */
                      /* `#START UART_1_TXISR_END` */
              
                      /* `#END` */
              
                  #ifdef UART_1_TXISR_EXIT_CALLBACK
                      UART_1_TXISR_ExitCallback();
                  #endif /* UART_1_TXISR_EXIT_CALLBACK */
              
                  #if(CY_PSOC3)
                      EA = int_en;
                  #endif /* (CY_PSOC3) */
                 }
              #endif /* (UART_1_TX_INTERRUPT_ENABLED && UART_1_TX_ENABLED) */
 269          
 270          
 271          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    265    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
