C51 COMPILER V9.51   CYFITTER_CFG                                                          05/22/2017 14:28:06 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) 
                    -PR(.\DP8051\DP8051_Keil_951\Debug/cyfitter_cfg.lst) OT(5) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: cyfitter_cfg.c
   3          * 
   4          * PSoC Creator  4.0 Update 1
   5          *
   6          * Description:
   7          * This file contains device initialization code.
   8          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
   9          * This file is automatically generated by PSoC Creator.
  10          *
  11          ********************************************************************************
  12          * Copyright (c) 2007-2016 Cypress Semiconductor.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include "cytypes.h"
  20          #include "cydevice_trm.h"
  21          #include "cyfitter.h"
  22          #include "CyLib.h"
  23          #include "cyfitter_cfg.h"
  24          
  25          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  26          
  27          
  28          #if defined(__C51__) || defined(__CX51__)
  29                  #define CYPACKED
  30                  #define CYPACKED_ATTR
  31                  #define CYALIGNED
  32                  
  33              #define CY_CFG_UNUSED
  34                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  35          
  36          
  37          
  38                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  39                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  40                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  41          #else
                      #error Unsupported toolchain
              #endif
  44          
  45          
  46          
  47          
  48          /* Clock startup error codes                                                   */
  49          #define CYCLOCKSTART_NO_ERROR    0u
  50          #define CYCLOCKSTART_XTAL_ERROR  1u
  51          #define CYCLOCKSTART_32KHZ_ERROR 2u
  52          #define CYCLOCKSTART_PLL_ERROR   3u
  53          
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/22/2017 14:28:06 PAGE 2   

  54          
  55          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  56          /*******************************************************************************
  57          * Function Name: CyClockStartupError
  58          ********************************************************************************
  59          * Summary:
  60          *  If an error is encountered during clock configuration (crystal startup error,
  61          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  62          *  the customer, this function will stop in an infinite loop.
  63          *
  64          * Parameters:
  65          *   void
  66          *
  67          * Return:
  68          *   void
  69          *
  70          *******************************************************************************/
  71          CY_CFG_UNUSED
  72          static void CyClockStartupError(uint8 errorCode);
  73          CY_CFG_UNUSED
  74          static void CyClockStartupError(uint8 errorCode)
  75          {
  76   1          /* To remove the compiler warning if errorCode not used.                */
  77   1          errorCode = errorCode;
  78   1      
  79   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  80   1          /* we will end up here to allow the customer to implement something to  */
  81   1          /* deal with the clock condition.                                       */
  82   1      
  83   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                      CY_CFG_Clock_Startup_ErrorCallback();
              #else
  86   1              /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  87   1          /* `#START CyClockStartupError` */
  88   1      
  89   1          /* `#END` */
  90   1      
  91   1          /* If nothing else, stop here since the clocks have not started         */
  92   1          /* correctly.                                                           */
  93   1          while(1) {}
  94   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */ 
  95   1      }
  96          #endif
  97          
  98          #define cfg_byte_table ((const void CYFAR *)0x080000u)
  99          /* IOPINS0_0 Address: CYREG_PRT0_DR Size (bytes): 10 */
 100          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x0008086Cu)
 101          
 102          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 103          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x00080878u)
 104          
 105          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 106          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00080880u)
 107          
 108          /* IOPINS0_3 Address: CYREG_PRT3_DM0 Size (bytes): 8 */
 109          #define BS_IOPINS0_3_VAL ((const uint8 CYFAR *)0x00080888u)
 110          
 111          /* IOPINS0_5 Address: CYREG_PRT5_DM0 Size (bytes): 8 */
 112          #define BS_IOPINS0_5_VAL ((const uint8 CYFAR *)0x00080890u)
 113          
 114          /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 115          #define BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL ((const uint8 CYFAR *)0x00080898u)
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/22/2017 14:28:06 PAGE 3   

 116          
 117          
 118          /*******************************************************************************
 119          * Function Name: ClockSetup
 120          ********************************************************************************
 121          *
 122          * Summary:
 123          *  Performs the initialization of all of the clocks in the device based on the
 124          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 125          *  clocks and setting the necessary dividers to produce the desired frequency. 
 126          *
 127          * Parameters:
 128          *  void
 129          *
 130          * Return:
 131          *  void
 132          *
 133          *******************************************************************************/
 134          static void ClockSetup(void);
 135          static void ClockSetup(void)
 136          {
 137   1              uint32 timeout;
 138   1              uint8 pllLock;
 139   1      
 140   1      
 141   1              /* Configure Digital Clocks based on settings from Clock DWR */
 142   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0000u);
 143   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x58u);
 144   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x0000u);
 145   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG1_CFG0 + 0x2u), 0x50u);
 146   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG2_CFG0), 0x01DFu);
 147   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG2_CFG0 + 0x2u), 0x1Cu);
 148   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG3_CFG0), 0x0270u);
 149   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG3_CFG0 + 0x2u), 0x18u);
 150   1      
 151   1              /* Configure Analog Clocks based on settings from Clock DWR */
 152   1              CYCONFIGCPY((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (const void CYFAR *)(BS_CYDEV_CLKDIST_ACFG0_CFG0_VA
             -L), 4u);
 153   1      
 154   1              /* Configure ILO based on settings from Clock DWR */
 155   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 156   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 157   1      
 158   1              /* Configure IMO based on settings from Clock DWR */
 159   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 160   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 161   1      
 162   1              /* Configure PLL based on settings from Clock DWR */
 163   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0010u);
 164   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 165   1              /* Wait up to 250us for the PLL to lock */
 166   1              pllLock = 0u;
 167   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 168   1              { 
 169   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 170   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 171   2              }
 172   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 173   1              if (timeout == 0u)
 174   1              {
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/22/2017 14:28:06 PAGE 4   

 175   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 176   2              }
 177   1      
 178   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 179   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 180   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 181   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 182   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 183   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 184   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 185   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DLY1), 0x04u);
 186   1      
 187   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x0Fu
             -)));
 188   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG1), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG1) | 0x01u
             -)));
 189   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG0), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x80u
             -)));
 190   1      }
 191          
 192          
 193          /* Analog API Functions */
 194          
 195          
 196          /*******************************************************************************
 197          * Function Name: AnalogSetDefault
 198          ********************************************************************************
 199          *
 200          * Summary:
 201          *  Sets up the analog portions of the chip to default values based on chip
 202          *  configuration options from the project.
 203          *
 204          * Parameters:
 205          *  void
 206          *
 207          * Return:
 208          *  void
 209          *
 210          *******************************************************************************/
 211          static void AnalogSetDefault(void);
 212          static void AnalogSetDefault(void)
 213          {
 214   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 215   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 216   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 217   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x01u);
 218   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT3_AG, 0x50u);
 219   1              CY_SET_REG8((void CYXDATA *)CYREG_SC1_SW0, 0x10u);
 220   1              CY_SET_REG8((void CYXDATA *)CYREG_SC1_SW8, 0x80u);
 221   1              CY_SET_REG8((void CYXDATA *)CYREG_SC3_SW0, 0x40u);
 222   1              CY_SET_REG8((void CYXDATA *)CYREG_SC3_SW8, 0x04u);
 223   1              CY_SET_REG8((void CYXDATA *)CYREG_DAC2_SW0, 0x20u);
 224   1              CY_SET_REG8((void CYXDATA *)CYREG_DAC3_SW0, 0x20u);
 225   1              CY_SET_REG8((void CYXDATA *)CYREG_CMP2_SW0, 0x80u);
 226   1              CY_SET_REG8((void CYXDATA *)CYREG_CMP2_SW4, 0x20u);
 227   1              CY_SET_REG8((void CYXDATA *)CYREG_CMP3_SW0, 0x04u);
 228   1              CY_SET_REG8((void CYXDATA *)CYREG_CMP3_SW4, 0x20u);
 229   1              CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x10u);
 230   1              CY_SET_REG8((void CYXDATA *)CYREG_BUS_SW0, 0x80u);
 231   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 232   1      }
 233          
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/22/2017 14:28:06 PAGE 5   

 234          
 235          /*******************************************************************************
 236          * Function Name: SetAnalogRoutingPumps
 237          ********************************************************************************
 238          *
 239          * Summary:
 240          * Enables or disables the analog pumps feeding analog routing switches.
 241          * Intended to be called at startup, based on the Vdda system configuration;
 242          * may be called during operation when the user informs us that the Vdda voltage
 243          * crossed the pump threshold.
 244          *
 245          * Parameters:
 246          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 247          *
 248          * Return:
 249          *  void
 250          *
 251          *******************************************************************************/
 252          void SetAnalogRoutingPumps(uint8 enabled)
 253          {
 254   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 255   1              if (enabled != 0u)
 256   1              {
 257   2                      regValue |= 0x22u;
 258   2              }
 259   1              else
 260   1              {
 261   2                      regValue &= (uint8)~0x22u;
 262   2              }
 263   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 264   1      }
 265          
 266          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 267          /* This is an implementation detail of the AMux. Code that depends on it may be
 268             incompatible with other versions of PSoC Creator. */
 269          uint8 CYXDATA * const CYCODE ADC_DelSig_1_AMux__addrTable[2] = {
 270                  (uint8 CYXDATA *)CYREG_DSM0_SW3, 
 271                  (uint8 CYXDATA *)CY_AMUX_UNUSED, 
 272          };
 273          
 274          /* This is an implementation detail of the AMux. Code that depends on it may be
 275             incompatible with other versions of PSoC Creator. */
 276          const uint8 CYCODE ADC_DelSig_1_AMux__maskTable[2] = {
 277                  0x40u, 
 278                  0x00u, 
 279          };
 280          
 281          /*******************************************************************************
 282          * Function Name: ADC_DelSig_1_AMux_Set
 283          ********************************************************************************
 284          * Summary:
 285          *  This function is used to set a particular channel as active on the AMux.
 286          *
 287          * Parameters:  
 288          *   channel - The mux channel input to set as active
 289          *
 290          * Return:
 291          *   void
 292          *
 293          *******************************************************************************/
 294          void ADC_DelSig_1_AMux_Set(uint8 channel)
 295          {
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/22/2017 14:28:06 PAGE 6   

 296   1              if (channel < 2)
 297   1              {
 298   2                      *ADC_DelSig_1_AMux__addrTable[channel] |= ADC_DelSig_1_AMux__maskTable[channel];
 299   2              }
 300   1      }
 301          
 302          /*******************************************************************************
 303          * Function Name: ADC_DelSig_1_AMux_Unset
 304          ********************************************************************************
 305          * Summary:
 306          *  This function is used to clear a particular channel from being active on the
 307          *  AMux.
 308          *
 309          * Parameters:  
 310          *   channel - The mux channel input to mark inactive
 311          *
 312          * Return:
 313          *   void
 314          *
 315          *******************************************************************************/
 316          void ADC_DelSig_1_AMux_Unset(uint8 channel)
 317          {
 318   1              if (channel < 2)
 319   1              {
 320   2                      *ADC_DelSig_1_AMux__addrTable[channel] &= (uint8)~ADC_DelSig_1_AMux__maskTable[channel];
 321   2              }
 322   1      }
 323          
 324          
 325          
 326          /*******************************************************************************
 327          * Function Name: cyfitter_cfg
 328          ********************************************************************************
 329          * Summary:
 330          *  This function is called by the start-up code for the selected device. It
 331          *  performs all of the necessary device configuration based on the design
 332          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 333          *  as Clocks and Pins as well as any component configuration that is necessary.
 334          *
 335          * Parameters:  
 336          *   void
 337          *
 338          * Return:
 339          *   void
 340          *
 341          *******************************************************************************/
 342          
 343          void cyfitter_cfg(void)
 344          {
 345   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 346   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 347   1      
 348   1              {
 349   2      
 350   2                      CYPACKED typedef struct {
 351   2                              void CYFAR *address;
 352   2                              uint16 size;
 353   2                      } CYPACKED_ATTR cfg_memset_t;
 354   2      
 355   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 356   2                              /* address, size */
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/22/2017 14:28:06 PAGE 7   

 357   2                              {(void CYFAR *)(CYREG_TMR0_CFG0), 12u},
 358   2                              {(void CYFAR *)(CYREG_PRT4_DR), 16u},
 359   2                              {(void CYFAR *)(CYREG_PRT6_DR), 16u},
 360   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 361   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 362   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 363   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 364   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 365   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 366   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 367   2                      };
 368   2      
 369   2                      uint8 CYDATA i;
 370   2      
 371   2                      /* Zero out critical memory blocks before beginning configuration */
 372   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 373   2                      {
 374   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 375   3                              CYMEMZERO(ms->address, ms->size);
 376   3                      }
 377   2      
 378   2                      cfg_write_bytes(cfg_byte_table);
 379   2      
 380   2                      /* Perform normal device configuration. Order is not critical for these items. */
 381   2                      CY_SET_REG8((void CYXDATA *)(CYREG_DSM0_CR3), 0x0Au);
 382   2                      CY_SET_XTND_REG16((void CYFAR *)(CYREG_LUT2_CR), 0x0203u);
 383   2                      CY_SET_XTND_REG16((void CYFAR *)(CYREG_LUT3_CR), 0x0303u);
 384   2      
 385   2                      /* Enable digital routing */
 386   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 387   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 388   2      
 389   2                      /* Enable UDB array */
 390   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 391   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 392   2              }
 393   1      
 394   1      
 395   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 396   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DR), (const void CYFAR *)(BS_IOPINS0_0_VAL), 10u);
 397   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (const void CYFAR *)(BS_IOPINS0_1_VAL), 8u);
 398   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 399   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT3_DM0), (const void CYFAR *)(BS_IOPINS0_3_VAL), 8u);
 400   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT5_DM0), (const void CYFAR *)(BS_IOPINS0_5_VAL), 8u);
 401   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 402   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 403   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 404   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 405   1              {
 406   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 407   2              }
 408   1      
 409   1      
 410   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 411   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 412   1              /* Setup clocks based on selections from Clock DWR */
 413   1              ClockSetup();
 414   1      
C51 COMPILER V9.51   CYFITTER_CFG                                                          05/22/2017 14:28:06 PAGE 8   

 415   1              /* Perform basic analog initialization to defaults */
 416   1              AnalogSetDefault();
 417   1      
 418   1              /* Configure alternate active mode */
 419   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 420   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 421   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    982    ----
   CONSTANT SIZE    =     56    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
