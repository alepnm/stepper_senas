C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\CyFlash.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\
                    -DP8051\DP8051_Keil_951\Debug/CyFlash.lst) OT(5) OJ(.\DP8051\DP8051_Keil_951\Debug\CyFlash.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file CyFlash.c
   3          * \version 5.50
   4          *
   5          * \brief Provides an API for the FLASH/EEPROM.
   6          *
   7          * \note This code is endian agnostic.
   8          *
   9          * \note Documentation of the API's in this file is located in the System
  10          * Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * \copyright
  14          * Copyright 2008-2016, Cypress Semiconductor Corporation. All rights reserved.
  15          * You may use this file only in accordance with the license, terms, conditions,
  16          * disclaimers, and limitations in the end user license agreement accompanying
  17          * the software package with which this file was provided.
  18          *******************************************************************************/
  19          
  20          #include "CyFlash.h"
  21          
  22          /*  The number of EEPROM arrays */
  23          #define CY_FLASH_EEPROM_NUMBER_ARRAYS                 (1u)
  24          
  25          
  26          /*******************************************************************************
  27          * Holds the die temperature, updated by CySetTemp(). Used for flash writing.
  28          * The first byte is the sign of the temperature (0 = negative, 1 = positive).
  29          * The second byte is the magnitude.
  30          *******************************************************************************/
  31          uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
  32          
  33          #if(CYDEV_ECC_ENABLE == 0)
  34              static uint8 * rowBuffer = 0;
  35          #endif  /* (CYDEV_ECC_ENABLE == 0) */
  36          
  37          
  38          static cystatus CySetTempInt(void);
  39          static cystatus CyFlashGetSpcAlgorithm(void);
  40          
  41          
  42          /*******************************************************************************
  43          * Function Name: CyFlash_Start
  44          ****************************************************************************//**
  45          *
  46          *  Enable the Flash.
  47          *
  48          *******************************************************************************/
  49          void CyFlash_Start(void) 
  50          {
  51   1          uint8 interruptState;
  52   1      
  53   1          interruptState = CyEnterCriticalSection();
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 2   

  54   1      
  55   1      
  56   1          /***************************************************************************
  57   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
  58   1          * is required for the SPC to function.
  59   1          ***************************************************************************/
  60   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
  61   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
  62   1      
  63   1      
  64   1          /***************************************************************************
  65   1          * The wake count defines the number of Bus Clock cycles it takes for the
  66   1          * flash or eeprom to wake up from a low power mode independent of the chip
  67   1          * power mode. Wake up time for these blocks is 5 us.
  68   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
  69   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
  70   1          * This register needs to be written with a value dependent on the Bus Clock
  71   1          * frequency so that the duration of the cycles is equal to or greater than
  72   1          * the 5 us delay required.
  73   1          ***************************************************************************/
  74   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
  75   1      
  76   1      
  77   1          /***************************************************************************
  78   1          * Enable flash. Active flash macros consume current, but re-enabling a
  79   1          * disabled flash macro takes 5us. If the CPU attempts to fetch out of the
  80   1          * macro during that time, it will be stalled. This bit allows the flash to
  81   1          * be enabled even if the CPU is disabled, which allows a quicker return to
  82   1          * code execution.
  83   1          ***************************************************************************/
  84   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_FM;
  85   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_FM;
  86   1      
  87   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
  88   1          {
  89   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
  90   2          }
  91   1      
  92   1          CyExitCriticalSection(interruptState);
  93   1      }
  94          
  95          
  96          /*******************************************************************************
  97          * Function Name: CyFlash_Stop
  98          ****************************************************************************//**
  99          *
 100          *  Disable the Flash.
 101          *
 102          * \sideeffect
 103          *  This setting is ignored as long as the CPU is currently running.  This will
 104          *  only take effect when the CPU is later disabled.
 105          *
 106          *******************************************************************************/
 107          void CyFlash_Stop(void) 
 108          {
 109   1          uint8 interruptState;
 110   1      
 111   1          interruptState = CyEnterCriticalSection();
 112   1      
 113   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_FM));
 114   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_FM));
 115   1      
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 3   

 116   1          CyExitCriticalSection(interruptState);
 117   1      }
 118          
 119          
 120          /*******************************************************************************
 121          * Function Name: CySetTempInt
 122          ****************************************************************************//**
 123          *
 124          *  Sends a command to the SPC to read the die temperature. Sets a global value
 125          *  used by the Write function. This function must be called once before
 126          *  executing a series of Flash writing functions.
 127          *
 128          * \return
 129          *  status:
 130          *   CYRET_SUCCESS - if successful
 131          *   CYRET_LOCKED  - if Flash writing already in use
 132          *   CYRET_UNKNOWN - if there was an SPC error
 133          *
 134          *******************************************************************************/
 135          static cystatus CySetTempInt(void) 
 136          {
 137   1          cystatus status;
 138   1      
 139   1          /* Make sure SPC is powered */
 140   1          CySpcStart();
 141   1      
 142   1          /* Plan for failure. */
 143   1          status = CYRET_UNKNOWN;
 144   1      
 145   1          if(CySpcLock() == CYRET_SUCCESS)
 146   1          {
 147   2              /* Write the command. */
 148   2              if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES))
 149   2              {
 150   3                  do
 151   3                  {
 152   4                      if(CySpcReadData(dieTemperature, CY_FLASH_DIE_TEMP_DATA_SIZE) == CY_FLASH_DIE_TEMP_DATA_SI
             -ZE)
 153   4                      {
 154   5                          status = CYRET_SUCCESS;
 155   5      
 156   5                          while(CY_SPC_BUSY)
 157   5                          {
 158   6                              /* Spin until idle. */
 159   6                              CyDelayUs(1u);
 160   6                          }
 161   5                          break;
 162   5                      }
 163   4      
 164   4                  } while(CY_SPC_BUSY);
 165   3              }
 166   2      
 167   2              CySpcUnlock();
 168   2          }
 169   1          else
 170   1          {
 171   2              status = CYRET_LOCKED;
 172   2          }
 173   1      
 174   1          return (status);
 175   1      }
 176          
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 4   

 177          
 178          /*******************************************************************************
 179          * Function Name: CyFlashGetSpcAlgorithm
 180          ****************************************************************************//**
 181          *
 182          *  Sends a command to the SPC to download code into RAM.
 183          *
 184          * \return
 185          *  status:
 186          *   CYRET_SUCCESS - if successful
 187          *   CYRET_LOCKED  - if Flash writing already in use
 188          *   CYRET_UNKNOWN - if there was an SPC error
 189          *
 190          *******************************************************************************/
 191          static cystatus CyFlashGetSpcAlgorithm(void) 
 192          {
 193   1          cystatus status;
 194   1      
 195   1          /* Make sure SPC is powered */
 196   1          CySpcStart();
 197   1      
 198   1          if(CySpcLock() == CYRET_SUCCESS)
 199   1          {
 200   2              status = CySpcGetAlgorithm();
 201   2      
 202   2              if(CYRET_STARTED == status)
 203   2              {
 204   3                  while(CY_SPC_BUSY)
 205   3                  {
 206   4                      /* Spin until idle. */
 207   4                      CyDelayUs(1u);
 208   4                  }
 209   3      
 210   3                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 211   3                  {
 212   4                      status = CYRET_SUCCESS;
 213   4                  }
 214   3              }
 215   2              CySpcUnlock();
 216   2          }
 217   1          else
 218   1          {
 219   2              status = CYRET_LOCKED;
 220   2          }
 221   1      
 222   1          return (status);
 223   1      }
 224          
 225          
 226          /*******************************************************************************
 227          * Function Name: CySetTemp
 228          ****************************************************************************//**
 229          *
 230          *  This is a wraparound for CySetTempInt(). It is used to return the second
 231          *  successful read of the temperature value.
 232          *
 233          * \return
 234          *  status:
 235          *   CYRET_SUCCESS if successful.
 236          *   CYRET_LOCKED  if Flash writing already in use
 237          *   CYRET_UNKNOWN if there was an SPC error.
 238          *
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 5   

 239          *  uint8 dieTemperature[2]:
 240          *   Holds the die temperature for the flash writing algorithm. The first byte is
 241          *   the sign of the temperature (0 = negative, 1 = positive). The second byte is
 242          *   the magnitude.
 243          *
 244          *******************************************************************************/
 245          cystatus CySetTemp(void) 
 246          {
 247   1          cystatus status = CyFlashGetSpcAlgorithm();
 248   1      
 249   1          if(status == CYRET_SUCCESS)
 250   1          {
 251   2              status = CySetTempInt();
 252   2          }
 253   1      
 254   1          return (status);
 255   1      }
 256          
 257          
 258          /*******************************************************************************
 259          * Function Name: CySetFlashEEBuffer
 260          ****************************************************************************//**
 261          *
 262          *  Sets the user supplied temporary buffer to store SPC data while performing
 263          *  Flash and EEPROM commands. This buffer is only necessary when the Flash ECC
 264          *  is disabled.
 265          *
 266          *  \param buffer:
 267          *   The address of a block of memory to store temporary memory. The size of the
 268          *   block of memory is CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE.
 269          *
 270          * \return
 271          *  status:
 272          *   CYRET_SUCCESS if successful.
 273          *   CYRET_BAD_PARAM if the buffer is NULL
 274          *
 275          *******************************************************************************/
 276          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 277          {
 278   1          cystatus status = CYRET_SUCCESS;
 279   1      
 280   1          CySpcStart();
 281   1      
 282   1          #if(CYDEV_ECC_ENABLE == 0)
 283   1      
 284   1              if(NULL == buffer)
 285   1              {
 286   2                  rowBuffer = rowBuffer;
 287   2                  status = CYRET_BAD_PARAM;
 288   2              }
 289   1              else if(CySpcLock() != CYRET_SUCCESS)
 290   1              {
 291   2                  rowBuffer = rowBuffer;
 292   2                  status = CYRET_LOCKED;
 293   2              }
 294   1              else
 295   1              {
 296   2                  rowBuffer = buffer;
 297   2                  CySpcUnlock();
 298   2              }
 299   1      
 300   1          #else
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 6   

              
                      /* To suppress warning */
                      buffer = buffer;
              
                  #endif  /* (CYDEV_ECC_ENABLE == 0u) */
 306   1      
 307   1          return(status);
 308   1      }
 309          
 310          
 311          /*******************************************************************************
 312          * Function Name: CyWriteRowData
 313          ****************************************************************************//**
 314          *
 315          *  Sends a command to the SPC to load and program a row of data in
 316          *  Flash or EEPROM.
 317          *
 318          *  \param arrayID:    ID of the array to write.
 319          *   The type of write, Flash or EEPROM, is determined from the array ID.
 320          *   The arrays in the part are sequential starting at the first ID for the
 321          *   specific memory type. The array ID for the Flash memory lasts from 0x00 to
 322          *   0x3F and for the EEPROM memory it lasts from 0x40 to 0x7F.
 323          *  \param rowAddress: rowAddress of flash row to program.
 324          *  \param rowData:    Array of bytes to write.
 325          *
 326          * \return
 327          *  status:
 328          *   CYRET_SUCCESS if successful.
 329          *   CYRET_LOCKED if the SPC is already in use.
 330          *   CYRET_CANCELED if command not accepted
 331          *   CYRET_UNKNOWN if there was an SPC error.
 332          *
 333          *******************************************************************************/
 334          cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
 335          {
 336   1          uint16 rowSize;
 337   1          cystatus status;
 338   1      
 339   1          rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? CYDEV_EEPROM_ROW_SIZE : CYDEV_FLS_ROW_SIZE;
 340   1          status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
 341   1      
 342   1          return(status);
 343   1      }
 344          
 345          
 346          /*******************************************************************
 347          * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 348          * Data in ECC" DWR options are disabled, ECC section is available
 349          * for user data.
 350          *******************************************************************/
 351          #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowConfig
                  ****************************************************************************//**
                  *
                  *  Sends a command to the SPC to load and program a row of config data in the
                  *  Flash. This function is only valid for Flash array IDs (not for EEPROM).
                  *
                  *  \param arrayId:      ID of the array to write
                  *   The arrays in the part are sequential starting at the first ID for the
                  *   specific memory type. The array ID for the Flash memory lasts
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 7   

                  *   from 0x00 to 0x3F.
                  *  \param rowAddress:   The address of the sector to erase.
                  *  \param rowECC:       The array of bytes to write.
                  *
                  * \return
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC)\
                  
                  {
                      cystatus status;
              
                      status = CyWriteRowFull(arrayId, rowAddress, rowECC, CYDEV_ECC_ROW_SIZE);
              
                      return (status);
                  }
              
              #endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 386          
 387          
 388          
 389          /*******************************************************************************
 390          * Function Name: CyWriteRowFull
 391          ****************************************************************************//**
 392          *  Sends a command to the SPC to load and program a row of data in the Flash.
 393          *  rowData array is expected to contain Flash and ECC data if needed.
 394          *
 395          *  \param arrayId:    FLASH or EEPROM array id.
 396          *  \param rowData:    Pointer to a row of data to write.
 397          *  \param rowNumber:  Zero based number of the row.
 398          *  \param rowSize:    Size of the row.
 399          *
 400          * \return
 401          *  CYRET_SUCCESS if successful.
 402          *  CYRET_LOCKED if the SPC is already in use.
 403          *  CYRET_CANCELED if command not accepted
 404          *  CYRET_UNKNOWN if there was an SPC error.
 405          *
 406          *******************************************************************************/
 407          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8* rowData, uint16 rowSize) \
 408                  
 409          {
 410   1          cystatus status = CYRET_SUCCESS;
 411   1      
 412   1          if((arrayId <=  CY_SPC_LAST_FLASH_ARRAYID) && (arrayId > (CY_FLASH_NUMBER_ARRAYS  + CY_SPC_FIRST_FLASH
             -_ARRAYID)))
 413   1          {
 414   2              status = CYRET_BAD_PARAM;
 415   2          }
 416   1      
 417   1          if(arrayId > CY_SPC_LAST_EE_ARRAYID)
 418   1          {
 419   2              status = CYRET_BAD_PARAM;
 420   2          }
 421   1      
 422   1          if((arrayId >= CY_SPC_FIRST_EE_ARRAYID) && (arrayId > (CY_FLASH_EEPROM_NUMBER_ARRAYS + CY_SPC_FIRST_EE
             -_ARRAYID)))
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 8   

 423   1          {
 424   2              status = CYRET_BAD_PARAM;
 425   2          }
 426   1      
 427   1          if(arrayId <=  CY_SPC_LAST_FLASH_ARRAYID)
 428   1          {
 429   2              /* Flash */
 430   2              if(rowNumber > (CY_FLASH_NUMBER_ROWS/CY_FLASH_NUMBER_ARRAYS))
 431   2              {
 432   3                  status = CYRET_BAD_PARAM;
 433   3              }
 434   2          }
 435   1          else
 436   1          {
 437   2              /* EEPROM */
 438   2              if(rowNumber > (CY_EEPROM_NUMBER_ROWS/CY_FLASH_EEPROM_NUMBER_ARRAYS))
 439   2              {
 440   3                  status = CYRET_BAD_PARAM;
 441   3              }
 442   2      
 443   2              if(CY_EEPROM_SIZEOF_ROW != rowSize)
 444   2              {
 445   3                  status = CYRET_BAD_PARAM;
 446   3              }
 447   2          }
 448   1      
 449   1          if(rowData == NULL)
 450   1          {
 451   2              status = CYRET_BAD_PARAM;
 452   2          }
 453   1      
 454   1      
 455   1          if(status == CYRET_SUCCESS)
 456   1          {
 457   2              if(CySpcLock() == CYRET_SUCCESS)
 458   2              {
 459   3                  /* Load row data into SPC internal latch */
 460   3                  status = CySpcLoadRowFull(arrayId, rowNumber, rowData, rowSize);
 461   3      
 462   3                  if(CYRET_STARTED == status)
 463   3                  {
 464   4                      while(CY_SPC_BUSY)
 465   4                      {
 466   5                          /* Wait for SPC to finish and get SPC status */
 467   5                          CyDelayUs(1u);
 468   5                      }
 469   4      
 470   4                      /* Hide SPC status */
 471   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 472   4                      {
 473   5                          status = CYRET_SUCCESS;
 474   5                      }
 475   4                      else
 476   4                      {
 477   5                          status = CYRET_UNKNOWN;
 478   5                      }
 479   4      
 480   4                      if(CYRET_SUCCESS == status)
 481   4                      {
 482   5                          /* Erase and program flash with data from SPC interval latch */
 483   5                          status = CySpcWriteRow(arrayId, rowNumber, dieTemperature[0u], dieTemperature[1u]);
 484   5      
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 9   

 485   5                          if(CYRET_STARTED == status)
 486   5                          {
 487   6                              while(CY_SPC_BUSY)
 488   6                              {
 489   7                                  /* Wait for SPC to finish and get SPC status */
 490   7                                  CyDelayUs(1u);
 491   7                              }
 492   6      
 493   6                              /* Hide SPC status */
 494   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 495   6                              {
 496   7                                  status = CYRET_SUCCESS;
 497   7                              }
 498   6                              else
 499   6                              {
 500   7                                  status = CYRET_UNKNOWN;
 501   7                              }
 502   6                          }
 503   5                      }
 504   4                  }
 505   3                  CySpcUnlock();
 506   3              }   /* if(CySpcLock() == CYRET_SUCCESS) */
 507   2              else
 508   2              {
 509   3                  status = CYRET_LOCKED;
 510   3              }
 511   2          }
 512   1      
 513   1          return(status);
 514   1      }
 515          
 516          
 517          /*******************************************************************************
 518          * Function Name: CyFlash_SetWaitCycles
 519          ****************************************************************************//**
 520          *
 521          *  Sets the number of clock cycles the cache will wait before it samples data
 522          *  coming back from the Flash. This function must be called before increasing
 523          *  the CPU clock frequency. It can optionally be called after lowering the CPU
 524          *  clock frequency in order to improve the CPU performance.
 525          *
 526          *  \param uint8 freq:
 527          *   Frequency of operation in Megahertz.
 528          *
 529          *******************************************************************************/
 530          void CyFlash_SetWaitCycles(uint8 freq) 
 531          {
 532   1          uint8 interruptState;
 533   1      
 534   1          /* Save current global interrupt enable and disable it */
 535   1          interruptState = CyEnterCriticalSection();
 536   1      
 537   1          /***************************************************************************
 538   1          * The number of clock cycles the cache will wait before it samples data
 539   1          * coming back from the Flash must be equal or greater to to the CPU frequency
 540   1          * outlined in clock cycles.
 541   1          ***************************************************************************/
 542   1      
 543   1          if (freq < CY_FLASH_CACHE_WS_1_FREQ_MAX)
 544   1          {
 545   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 546   2                                          CY_FLASH_CACHE_WS_1_VALUE_MASK;
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 10  

 547   2          }
 548   1          else if (freq < CY_FLASH_CACHE_WS_2_FREQ_MAX)
 549   1          {
 550   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 551   2                                          CY_FLASH_CACHE_WS_2_VALUE_MASK;
 552   2          }
 553   1          else if (freq < CY_FLASH_CACHE_WS_3_FREQ_MAX)
 554   1          {
 555   2              CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
 556   2                                          CY_FLASH_CACHE_WS_3_VALUE_MASK;
 557   2          }
 558   1      #if (CY_PSOC5)
                  else if (freq < CY_FLASH_CACHE_WS_4_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
                                                  CY_FLASH_CACHE_WS_4_VALUE_MASK;
                  }
                  else if (freq <= CY_FLASH_CACHE_WS_5_FREQ_MAX)
                  {
                      CY_FLASH_CONTROL_REG = (CY_FLASH_CONTROL_REG & (uint8)(~CY_FLASH_CACHE_WS_VALUE_MASK)) |
                                                  CY_FLASH_CACHE_WS_5_VALUE_MASK;
                  }
              #endif  /* (CY_PSOC5) */
 570   1          else
 571   1          {
 572   2              /* Halt CPU in debug mode if frequency is invalid */
 573   2              CYASSERT(0u != 0u);
 574   2          }
 575   1      
 576   1          /* Restore global interrupt enable state */
 577   1          CyExitCriticalSection(interruptState);
 578   1      }
 579          
 580          
 581          /*******************************************************************************
 582          * Function Name: CyEEPROM_Start
 583          ****************************************************************************//**
 584          *
 585          *  Enable the EEPROM.
 586          *
 587          *******************************************************************************/
 588          void CyEEPROM_Start(void) 
 589          {
 590   1          uint8 interruptState;
 591   1      
 592   1          interruptState = CyEnterCriticalSection();
 593   1      
 594   1      
 595   1          /***************************************************************************
 596   1          * Enable SPC clock. This also internally enables the 36MHz IMO, since this
 597   1          * is required for the SPC to function.
 598   1          ***************************************************************************/
 599   1          CY_FLASH_PM_ACT_CFG0_REG    |= CY_FLASH_PM_ACT_CFG0_EN_CLK_SPC;
 600   1          CY_FLASH_PM_ALTACT_CFG0_REG |= CY_FLASH_PM_ALTACT_CFG0_EN_CLK_SPC;
 601   1      
 602   1      
 603   1          /***************************************************************************
 604   1          * The wake count defines the number of Bus Clock cycles it takes for the
 605   1          * flash or EEPROM to wake up from a low power mode independent of the chip
 606   1          * power mode. Wake up time for these blocks is 5 us.
 607   1          * The granularity of this register is 2 Bus Clock cycles, so a value of 0x1E
 608   1          * (30d) defines the wake up time as 60 cycles of the Bus Clock.
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 11  

 609   1          * This register needs to be written with a value dependent on the Bus Clock
 610   1          * frequency so that the duration of the cycles is equal to or greater than
 611   1          * the 5 us delay required.
 612   1          ***************************************************************************/
 613   1          CY_FLASH_SPC_FM_EE_WAKE_CNT_REG = CY_FLASH_SPC_FM_EE_WAKE_CNT_80MHZ;
 614   1      
 615   1      
 616   1          /***************************************************************************
 617   1          * Enable EEPROM. Re-enabling an EEPROM macro takes 5us. During this time,
 618   1          * the EE will not acknowledge a PHUB request.
 619   1          ***************************************************************************/
 620   1          CY_FLASH_PM_ACT_CFG12_REG    |= CY_FLASH_PM_ACT_CFG12_EN_EE;
 621   1          CY_FLASH_PM_ALTACT_CFG12_REG |= CY_FLASH_PM_ALTACT_CFG12_EN_EE;
 622   1      
 623   1          while(0u == (CY_FLASH_SPC_FM_EE_CR_REG & CY_FLASH_EE_EE_AWAKE))
 624   1          {
 625   2              /* Non-zero status denotes that the EEPROM/Flash is awake & powered. */
 626   2          }
 627   1      
 628   1          CyExitCriticalSection(interruptState);
 629   1      }
 630          
 631          
 632          /*******************************************************************************
 633          * Function Name: CyEEPROM_Stop
 634          ****************************************************************************//**
 635          *
 636          *  Disable the EEPROM.
 637          *
 638          *******************************************************************************/
 639          void CyEEPROM_Stop (void) 
 640          {
 641   1          uint8 interruptState;
 642   1      
 643   1          interruptState = CyEnterCriticalSection();
 644   1      
 645   1          CY_FLASH_PM_ACT_CFG12_REG    &= ((uint8)(~CY_FLASH_PM_ACT_CFG12_EN_EE));
 646   1          CY_FLASH_PM_ALTACT_CFG12_REG &= ((uint8)(~CY_FLASH_PM_ALTACT_CFG12_EN_EE));
 647   1      
 648   1          CyExitCriticalSection(interruptState);
 649   1      }
 650          
 651          
 652          /*******************************************************************************
 653          * Function Name: CyEEPROM_ReadReserve
 654          ****************************************************************************//**
 655          *
 656          *  Request access to the EEPROM for reading and wait until access is available.
 657          *
 658          *******************************************************************************/
 659          void CyEEPROM_ReadReserve(void) 
 660          {
 661   1          /* Make request for PHUB to have access */
 662   1          CY_FLASH_EE_SCR_REG |= CY_FLASH_EE_SCR_AHB_EE_REQ;
 663   1      
 664   1          while (0u == (CY_FLASH_EE_SCR_REG & CY_FLASH_EE_SCR_AHB_EE_ACK))
 665   1          {
 666   2              /* Wait for acknowledgment from PHUB */
 667   2          }
 668   1      }
 669          
 670          
C51 COMPILER V9.51   CYFLASH                                                               05/22/2017 14:28:00 PAGE 12  

 671          /*******************************************************************************
 672          * Function Name: CyEEPROM_ReadRelease
 673          ****************************************************************************//**
 674          *
 675          *  Release the read reservation of the EEPROM.
 676          *
 677          *******************************************************************************/
 678          void CyEEPROM_ReadRelease(void) 
 679          {
 680   1          CY_FLASH_EE_SCR_REG &= (uint8)(~CY_FLASH_EE_SCR_AHB_EE_REQ);
 681   1      }
 682          
 683          
 684          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1016    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
