C51 COMPILER V9.51   STEPPER                                                               05/22/2017 14:27:56 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE STEPPER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\stepper.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -stepper.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051\DP8051_Keil_951\
                    -Debug/stepper.lst) OT(5) OJ(.\DP8051\DP8051_Keil_951\Debug\stepper.obj)

line level    source

   1          /*******************************************************************
   2          *  File Name: stepper.c  
   3          *  Version 1.1
   4          *
   5          *  Description: The file include two functions, one is stepping, the other is stopping.
   6          *  Hardware: DVK Rev4, Drive Borad V1.0 
   7          *  Author :  Dino Gu, Cypress APSC 
   8          *  Date :    Sept,10, 2009
   9          *
  10          *  Note:
  11          **********************************************************************
  12          ********************************************************************************
  13          * Copyright (2010), Cypress Semiconductor Corporation.
  14          ********************************************************************************
  15          * This software is owned by Cypress Semiconductor Corporation (Cypress) and is 
  16          * protected by and subject to worldwide patent protection (United States and 
  17          * foreign), United States copyright laws and international treaty provisions. 
  18          * Cypress hereby grants to licensee a personal, non-exclusive, non-transferable 
  19          * license to copy, use, modify, create derivative works of, and compile the 
  20          * Cypress Source Code and derivative works for the sole purpose of creating 
  21          * custom software in support of licensee product to be used only in conjunction 
  22          * with a Cypress integrated circuit as specified in the applicable agreement. 
  23          * Any reproduction, modification, translation, compilation, or representation of 
  24          * this software except as specified above is prohibited without the express 
  25          * written permission of Cypress.
  26          *
  27          * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
  28          * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  29          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  30          * Cypress reserves the right to make changes without further notice to the 
  31          * materials described herein. Cypress does not assume any liability arising out 
  32          * of the application or use of any product or circuit described herein. Cypress 
  33          * does not authorize its products for use as critical components in life-support 
  34          * systems where a malfunction or failure may reasonably be expected to result in 
  35          * significant injury to the user. The inclusion of Cypress' product in a life-
  36          * support systems application implies that the manufacturer assumes all risk of 
  37          * such use and in doing so indemnifies Cypress against all charges. Use may be 
  38          * limited by and subject to the applicable Cypress software license agreement. 
  39          *******************************************************************************/
  40          
  41          #include <device.h>
  42          #include "bool.h"
  43          #include "stepper.h"
  44          #include "UI_paras.h"
  45          
  46          /* 128 sinusoid table */
  47          static unsigned char SinTable[] = {
  48           255,255,255,255,255,254,254,254,253,253,
  49           253,252,252,251,251,250,249,249,248,247,
  50           247,246,245,244,243,242,241,240,239,238,
  51           237,236,234,233,232,231,229,228,226,225,
  52           223,222,220,219,217,215,214,212,210,208,
  53           207,205,203,201,199,197,195,193,191,189,
C51 COMPILER V9.51   STEPPER                                                               05/22/2017 14:27:56 PAGE 2   

  54           187,185,183,180,178,176,174,171,169,167,
  55           164,162,159,157,154,152,149,147,144,142,
  56           139,136,134,131,128,126,123,120,117,115,
  57           112,109,106,103,100,98,95,92,89,86,
  58           83,80,77,74,71,68,65,62,59,56,
  59           53,50,47,44,41,37,34,31,28,25,
  60           22,19,16,13,9,6,3,0
  61           };
  62          
  63          
  64          STEPPER Sm = STEPPER_DEFAULT;
  65          extern UI_DATA UI_Data;
  66          uint8  CurrRef;
  67          
  68          /*******************************************************************************
  69          * Function Name: Stepping
  70          ********************************************************************************
  71          *
  72          * Summary:
  73          *  Step function runs motor one step. This function is called in Timer ISR.
  74          *
  75          * Parameters:
  76          *  void
  77          *
  78          * Return:
  79          *  void
  80          *
  81          *******************************************************************************/
  82          void Stepping(void)
  83          {
  84   1         if(Sm.MicroStepPointer == 0)
  85   1         {    
  86   2              Sm.MicroStepPace = UI_Data.MicroStepPace;
  87   2            
  88   2              Control_Reg_1_Write(Sm.StageIndex); 
  89   2           
  90   2              if(UI_Data.Dir)
  91   2              {
  92   3                  Sm.StageIndex++;
  93   3                  if(Sm.StageIndex>3)
  94   3                  {
  95   4                    Sm.StageIndex=0;
  96   4                  } 
  97   3              }
  98   2              else
  99   2              {
 100   3                  Sm.StageIndex--;
 101   3                  if(Sm.StageIndex>3)
 102   3                  {
 103   4                     Sm.StageIndex=3;
 104   4                  } 
 105   3              }             
 106   2          }
 107   1           
 108   1          if(UI_Data.Dir)
 109   1          {
 110   2              if (!(Sm.StageIndex%2))         /* Current Up */
 111   2              Sm.SinTblPointer = Sm.MicroStepPointer;
 112   2              else                                            /* Current down */
 113   2              Sm.SinTblPointer = TABLETOP - Sm.MicroStepPointer; 
 114   2          }
 115   1          else
C51 COMPILER V9.51   STEPPER                                                               05/22/2017 14:27:56 PAGE 3   

 116   1          {
 117   2              if (Sm.StageIndex%2)            /* Current Up */
 118   2              Sm.SinTblPointer = Sm.MicroStepPointer;
 119   2              else                                            /* Current down */
 120   2              Sm.SinTblPointer = TABLETOP - Sm.MicroStepPointer;
 121   2          }
 122   1                  
 123   1          Sm.CosTblPointer = TABLETOP - Sm.SinTblPointer;
 124   1      
 125   1          CurrRef = SinTable[Sm.SinTblPointer];
 126   1          VDAC8_IrefA_SetValue(CurrRef);
 127   1          
 128   1          CurrRef = SinTable[Sm.CosTblPointer];
 129   1         
 130   1          VDAC8_IrefB_SetValue(CurrRef);
 131   1          
 132   1          Sm.MicroStepPointer += Sm.MicroStepPace;
 133   1          Sm.MicroStepPointer &= 0x7F; 
 134   1          
 135   1      }
 136          
 137          /*******************************************************************************
 138          * Function Name: Stopping
 139          ********************************************************************************
 140          *
 141          * Summary:
 142          *  Stop function stops motor and reduce its current for power saving.
 143          *
 144          * Parameters:
 145          *  void
 146          *
 147          * Return:
 148          *  void
 149          *
 150          *******************************************************************************/
 151          void Stopping(void)
 152          {   
 153   1          /* Reset index to zero*/
 154   1          Sm.StageIndex = 0;
 155   1      
 156   1          CurrRef = SinTable[Sm.SinTblPointer];
 157   1          CurrRef >>=2;               /* Reduce to 1/4 of normal value */
 158   1          VDAC8_IrefA_SetValue(CurrRef);
 159   1          
 160   1          CurrRef = SinTable[Sm.CosTblPointer];
 161   1          CurrRef >>=2;               /* Reduce to 1/4 of normal value */
 162   1          VDAC8_IrefB_SetValue(CurrRef);
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    258    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    135    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.51   STEPPER                                                               05/22/2017 14:27:56 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
