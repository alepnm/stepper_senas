C51 COMPILER V9.51   MAIN                                                                  05/22/2017 14:27:55 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051\DP8051_Keil_951\Deb
                    -ug/main.lst) OT(5) OJ(.\DP8051\DP8051_Keil_951\Debug\main.obj)

line level    source

   1          /*******************************************************************
   2          *  File Name: main.c  
   3          *  Version 1.2
   4          *
   5          *  Description: Stepper Motor Control. 
   6          *               Support up to 128 micro-steps. 
   7          *               Current is adjustable
   8          *               LCD for UI
   9          *               GUI Interface
  10          *  Revision:   Feb 20 2010, Update UI interface.
  11          *
  12          *  Author :  Dino Gu, Cypress APSC (Shanghai)
  13          *  Original Date :    Sept,10, 2009
  14          *  Original Version:  V1.0
  15          *  Note:
  16          **********************************************************************
  17          ********************************************************************************
  18          * Copyright (2010), Cypress Semiconductor Corporation.
  19          ********************************************************************************
  20          * This software is owned by Cypress Semiconductor Corporation (Cypress) and is 
  21          * protected by and subject to worldwide patent protection (United States and 
  22          * foreign), United States copyright laws and international treaty provisions. 
  23          * Cypress hereby grants to licensee a personal, non-exclusive, non-transferable 
  24          * license to copy, use, modify, create derivative works of, and compile the 
  25          * Cypress Source Code and derivative works for the sole purpose of creating 
  26          * custom software in support of licensee product to be used only in conjunction 
  27          * with a Cypress integrated circuit as specified in the applicable agreement. 
  28          * Any reproduction, modification, translation, compilation, or representation of 
  29          * this software except as specified above is prohibited without the express 
  30          * written permission of Cypress.
  31          *
  32          * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
  33          * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  34          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  35          * Cypress reserves the right to make changes without further notice to the 
  36          * materials described herein. Cypress does not assume any liability arising out 
  37          * of the application or use of any product or circuit described herein. Cypress 
  38          * does not authorize its products for use as critical components in life-support 
  39          * systems where a malfunction or failure may reasonably be expected to result in 
  40          * significant injury to the user. The inclusion of Cypress' product in a life-
  41          * support systems application implies that the manufacturer assumes all risk of 
  42          * such use and in doing so indemnifies Cypress against all charges. Use may be 
  43          * limited by and subject to the applicable Cypress software license agreement. 
  44          *******************************************************************************/
  45          #include <device.h> 
  46          #include "stepper.h"
  47          #include "UI_paras.h"
  48          #include "bool.h"
  49          #include "UART.h"
  50          #include "userinterface.h"
  51          
  52          uint16  SpeedFrq=150;
  53          uint8   StepEnable = FALSE;
C51 COMPILER V9.51   MAIN                                                                  05/22/2017 14:27:55 PAGE 2   

  54          uint8   CtrlStatus = UI_CONTROL; /* Default to UI control Method */
  55          
  56          UI_CMD          UI_Cmd;
  57          UI_DATA         UI_Data;
  58          
  59          extern STEPPER  Sm;
  60          uint8  SpdRPS =0;
  61          uint16 SpeedFrq0,SpeedFrq1;
  62          uint16 DeltCnt=0;
  63          uint16 ChangePrdThreshold=0;
  64          uint8  SpeedUpFlag;
  65          uint16 TotalCnt=0;
  66          uint8  FastAcc = FALSE;
  67          uint16 DeltSpeedFrq =0;
  68          uint16 PWMCnt =0;
  69          extern uint8  MenuState;
  70          extern uint16 SliderCnt;
  71          
  72          extern uint8 S1NextState;
  73          extern uint8 S2NextState;
  74          extern uint8 PotNextState;
  75          extern uint8 TimerNextState;
  76          
  77          void CalcTimerPeriod(void);
  78          /*******************************************************************************
  79          * Function Name: Main
  80          ********************************************************************************
  81          *
  82          * Summary:
  83          *  Main Function
  84          *
  85          * Parameters:
  86          *  void
  87          *
  88          * Return:
  89          *  void
  90          *
  91          *******************************************************************************/
  92          void main()
  93          {
  94   1      
  95   1              uint16 PrdTmp = 0;
  96   1              uint8  k;
  97   1      
  98   1          /* Set default micro-step pace */
  99   1          UI_Data.MicroStepPace = 16;
 100   1      
 101   1          /* Initialize GUI line commands */
 102   1          for(k=0;k<10;k++)
 103   1          {
 104   2              UI_Data.LineStart[k] = 0;
 105   2              UI_Data.LineEnd[k] = 0;
 106   2              UI_Data.LineCnt[k] = 0;
 107   2              UI_Data.LineWaitCnt[k] = 0;
 108   2          }
 109   1          UI_Data.LineIndex =0;
 110   1          
 111   1        
 112   1          /* Start PWM */
 113   1              PWM_A_Start();
 114   1              PWM_B_Start();
 115   1          PWM_A_WriteCompare(255);
C51 COMPILER V9.51   MAIN                                                                  05/22/2017 14:27:55 PAGE 3   

 116   1          PWM_B_WriteCompare(255);
 117   1          
 118   1          /* PGA Initialize */
 119   1          PGA_1_Start();
 120   1          PGA_2_Start();
 121   1          PGA_1_SetGain(PGA_1_GAIN_32);       /* Medium current level */
 122   1          PGA_2_SetGain(PGA_1_GAIN_32);
 123   1          
 124   1          /* Comparator and DAC Initialize */
 125   1          Comp_A_Start();
 126   1          Comp_B_Start();
 127   1              VDAC8_IrefA_Start();
 128   1          VDAC8_IrefB_Start();
 129   1          
 130   1          /* UART Initialize */
 131   1          UART_1_EnableRxInt();
 132   1              UART_1_Start();
 133   1          
 134   1          /* Timer Initialize */
 135   1              Timer_1_Start();
 136   1          Timer_1_WritePeriod(SpeedFrq*128);  /* 120 = Full step is 250rpm */
 137   1              isr_timer_Start();
 138   1          isr_pwm_Start();
 139   1          
 140   1          /* Motor Initialization */
 141   1          Control_Start_Write(0);
 142   1              UI_Data.Dir = TRUE;
 143   1              
 144   1              CYGlobalIntEnable;
 145   1      
 146   1              /* LCD and UI Initialization */
 147   1              LCD_Start();
 148   1              ADC_DelSig_1_Start();
 149   1              MenuState = MENU_READY;
 150   1              S1NextState = MENU_IGNORE_INPUT;
 151   1              S2NextState = MENU_IGNORE_INPUT;
 152   1          PotNextState = MENU_IGNORE_INPUT;
 153   1              TimerNextState = MENU_IGNORE_INPUT;
 154   1              
 155   1              /* main loop */
 156   1          for(;;)
 157   1          {        
 158   2              if(SpeedFrq!=0)
 159   2                      {
 160   3                              Timer_1_WritePeriod(SpeedFrq);  /* update step rate */
 161   3                      } 
 162   2                      if(CtrlStatus != GUI_CONTROL)           /* Update UI Control */
 163   2                      {
 164   3                              if(PWMCnt++ >= 4000)
 165   3                              {  
 166   4                                      PWMCnt=0;
 167   4                                      InterfaceProcess();
 168   4                              }
 169   3                      }
 170   2                      else                                                            /* Update GUI Control */
 171   2              {
 172   3                              CalcTimerPeriod();
 173   3              }
 174   2                    
 175   2      
 176   2              if(UI_Cmd.Run)                                          /* Start Motor */
 177   2              {
C51 COMPILER V9.51   MAIN                                                                  05/22/2017 14:27:55 PAGE 4   

 178   3                      Control_Start_Write(1);                 
 179   3                      StepEnable = TRUE;
 180   3              }
 181   2              else                                                            /* Stop motor */
 182   2              {
 183   3                      StepEnable = FALSE; 
 184   3                      Stopping();
 185   3              } 
 186   2          }
 187   1      }
 188          
 189          
 190          
 191          
 192          
 193          /*******************************************************************************
 194          * Function Name: SetMaxCurr
 195          ********************************************************************************
 196          *
 197          * Summary:
 198          *  SetMaxCurr Function updates the VDAC current based on motor rated current. 
 199          *
 200          * Parameters:
 201          *  void
 202          *
 203          * Return:
 204          *  void
 205          *
 206          *******************************************************************************/
 207          void SetMaxCurr(uint8 level)
 208          {
 209   1                  if(level==CURR_LOW)
 210   1                  {
 211   2      
 212   2                          PGA_1_SetGain(PGA_1_GAIN_48); /* 16 => 1.5A Ipeak. DAC rang is 1V. */
 213   2                          PGA_2_SetGain(PGA_1_GAIN_48);
 214   2                   }
 215   1                   else if (level==CURR_MEDIUM)
 216   1                   {
 217   2      
 218   2                          PGA_1_SetGain(PGA_1_GAIN_32); /* 16 => 1.5A Ipeak. DAC rang is 1V. */
 219   2                          PGA_2_SetGain(PGA_1_GAIN_32);
 220   2                   }
 221   1                   else if(level==CURR_HIGH)
 222   1                   {  
 223   2      
 224   2                          PGA_1_SetGain(PGA_1_GAIN_16); /* 16 => 1.5A Ipeak. DAC rang is 1V. */
 225   2                          PGA_2_SetGain(PGA_1_GAIN_16);
 226   2                   }
 227   1      }
 228          /*******************************************************************************
 229          * Function Name: CalcTimerPeriod
 230          ********************************************************************************
 231          *
 232          * Summary:
 233          *  CalcTimerPeriod Function calculates delta period of every step according to input 
 234          *  command. 
 235          *
 236          * Parameters:
 237          *  void
 238          *
 239          * Return:
C51 COMPILER V9.51   MAIN                                                                  05/22/2017 14:27:55 PAGE 5   

 240          *  void
 241          *
 242          *******************************************************************************/
 243          void CalcTimerPeriod(void)
 244          {
 245   1      
 246   1          SpeedFrq0 = UI_Data.LineStart[UI_Data.LineIndex];
 247   1          SpeedFrq1 = UI_Data.LineEnd[UI_Data.LineIndex];
 248   1         
 249   1              /* Speed Up */
 250   1          if(SpeedFrq0 > SpeedFrq1)
 251   1          {   
 252   2              SpeedUpFlag = TRUE;
 253   2              /* Decrease period value every n steps */
 254   2              if(UI_Data.LineCnt[UI_Data.LineIndex] >= (SpeedFrq0 - SpeedFrq1) )
 255   2              {
 256   3                      ChangePrdThreshold = UI_Data.LineCnt[UI_Data.LineIndex]/(SpeedFrq0 - SpeedFrq1);
 257   3                      FastAcc = FALSE;
 258   3              }
 259   2              /* Decrease period value every step */
 260   2              else
 261   2              {
 262   3                      DeltSpeedFrq = (SpeedFrq0 - SpeedFrq1)/UI_Data.LineCnt[UI_Data.LineIndex];
 263   3                      FastAcc = TRUE;
 264   3              }
 265   2          }
 266   1          /* Speed Down*/
 267   1          else if(SpeedFrq0 < SpeedFrq1)
 268   1          {   
 269   2              SpeedUpFlag = FALSE;
 270   2              /* Increase period value every n steps */
 271   2              if(UI_Data.LineCnt[UI_Data.LineIndex] >= (SpeedFrq1 - SpeedFrq0) )
 272   2              {
 273   3                      ChangePrdThreshold = UI_Data.LineCnt[UI_Data.LineIndex]/(SpeedFrq1 - SpeedFrq0);
 274   3                      FastAcc = FALSE;
 275   3              }
 276   2              /* Increase period value every step */
 277   2              else
 278   2              {
 279   3                      DeltSpeedFrq = (SpeedFrq1 - SpeedFrq0)/UI_Data.LineCnt[UI_Data.LineIndex];
 280   3                      FastAcc = TRUE;
 281   3              }         
 282   2          } 
 283   1      }
 284          
 285          /* [] END OF FILE */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    743    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    129       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
