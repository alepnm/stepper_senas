C51 COMPILER V9.51   USERINTERFACE                                                         05/22/2017 14:27:57 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USERINTERFACE
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\userinterface.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -userinterface.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051\DP8051_Kei
                    -l_951\Debug/userinterface.lst) OT(5) OJ(.\DP8051\DP8051_Keil_951\Debug\userinterface.obj)

line level    source

   1          /*******************************************************************
   2          *  File Name: userinterface.c  
   3          *  Version 1.1
   4          *
   5          *  Description: User interface LCD based menu and event handler
   6          *  Date :    Feb,10, 2010
   7          *
   8          *  Note:
   9          **********************************************************************
  10          ********************************************************************************
  11          * Copyright (2010), Cypress Semiconductor Corporation.
  12          ********************************************************************************
  13          * This software is owned by Cypress Semiconductor Corporation (Cypress) and is 
  14          * protected by and subject to worldwide patent protection (United States and 
  15          * foreign), United States copyright laws and international treaty provisions. 
  16          * Cypress hereby grants to licensee a personal, non-exclusive, non-transferable 
  17          * license to copy, use, modify, create derivative works of, and compile the 
  18          * Cypress Source Code and derivative works for the sole purpose of creating 
  19          * custom software in support of licensee product to be used only in conjunction 
  20          * with a Cypress integrated circuit as specified in the applicable agreement. 
  21          * Any reproduction, modification, translation, compilation, or representation of 
  22          * this software except as specified above is prohibited without the express 
  23          * written permission of Cypress.
  24          *
  25          * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
  26          * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  27          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  28          * Cypress reserves the right to make changes without further notice to the 
  29          * materials described herein. Cypress does not assume any liability arising out 
  30          * of the application or use of any product or circuit described herein. Cypress 
  31          * does not authorize its products for use as critical components in life-support 
  32          * systems where a malfunction or failure may reasonably be expected to result in 
  33          * significant injury to the user. The inclusion of Cypress' product in a life-
  34          * support systems application implies that the manufacturer assumes all risk of 
  35          * such use and in doing so indemnifies Cypress against all charges. Use may be 
  36          * limited by and subject to the applicable Cypress software license agreement. 
  37          *******************************************************************************/
  38          #include <device.h>
  39          #include "UI_paras.h"
  40          #include "bool.h"
  41          #include "stepper.h"
  42          #include "userinterface.h"
  43          
  44          
  45          
  46          int16 PotValue = 0;
  47          uint8 PotValuePrevious;
  48          uint8 PotCounter;
  49          uint8 PotSample[3];
  50          
  51          
  52          uint16 TempSetting;
  53          uint8 SliderCnt;
C51 COMPILER V9.51   USERINTERFACE                                                         05/22/2017 14:27:57 PAGE 2   

  54          
  55          uint8   MenuState = MENU_READY;
  56          uint8   S1NextState = MENU_IDLE;
  57          uint8   S2NextState = MENU_IDLE;
  58          uint8   PotNextState = MENU_IDLE;
  59          uint8   TimerNextState = MENU_IDLE;
  60          
  61          uint8   TimerThreshold;
  62          uint8   TimerValue;
  63          
  64          uint8 S1State = FALSE;
  65          uint8 S1Pressed = FALSE;
  66          uint8 S1DebounceCount = FALSE;
  67          
  68          uint8 S2State = FALSE;
  69          uint8 S2Pressed = FALSE;
  70          uint8 S2DebounceCount = FALSE;
  71          
  72          uint16 Result;
  73          
  74          
  75          extern UI_CMD UI_Cmd;
  76          extern UI_DATA UI_Data;
  77          extern uint16 wSpdRef;
  78          extern uint16 wSpdCur;
  79          
  80          extern uint8 ControlMode;
  81          
  82          
  83          extern uint8  SpdRPS;
  84          
  85          extern STEPPER Sm;
  86          
  87          extern uint16 SpeedFrq;
  88          /*******************************************************************************
  89          * Function Name: UpdateButtonState
  90          ********************************************************************************
  91          *
  92          * Summary:
  93          *  Updates the LCD screen with the current button state by displaying and empty
  94          *  box if inactive or a filled-in box if active. LED's are also updated 
  95          *  according to button state.
  96          *
  97          * Parameters:
  98          *  slot_1: Button state for B1
  99          *  slot_2: Button state for B2
 100          *
 101          * Return:
 102          *  void
 103          *
 104          *******************************************************************************/
 105          void InterfaceProcess(void)
 106          {
 107   1              
 108   1                      /* Read and Debounce switches */                
 109   1                      if(!S1State)
 110   1                      {
 111   2                              if(!Switch1_Read())
 112   2                              {
 113   3                                      S1DebounceCount++;
 114   3                                      if(S1DebounceCount > 2)
 115   3                                      {
C51 COMPILER V9.51   USERINTERFACE                                                         05/22/2017 14:27:57 PAGE 3   

 116   4                                              S1DebounceCount = 0;
 117   4                                              S1Pressed = TRUE;
 118   4                                              S1State = TRUE;
 119   4                                      }
 120   3                              }
 121   2                      }
 122   1                      else
 123   1                      {
 124   2                              if(Switch1_Read())
 125   2                              {
 126   3                                      S1DebounceCount++;
 127   3                                      if(S1DebounceCount > 2)
 128   3                                      {
 129   4                                              S1DebounceCount = 0;
 130   4                                              S1State = FALSE;
 131   4                                      }
 132   3                              }
 133   2                      }
 134   1                      
 135   1                      if(!S2State)
 136   1                      {
 137   2                              if(!Switch2_Read())
 138   2                              {
 139   3                                      S2DebounceCount++;
 140   3                                      if(S2DebounceCount > 2)
 141   3                                      {
 142   4                                              S2DebounceCount = 0;
 143   4                                              S2Pressed = TRUE;
 144   4                                              S2State = TRUE;
 145   4                                      }
 146   3                              }
 147   2                      }
 148   1                      else
 149   1                      {
 150   2                              if(Switch2_Read())
 151   2                              {
 152   3                                      S2DebounceCount++;
 153   3                                      if(S2DebounceCount > 2)
 154   3                                      {
 155   4                                              S2DebounceCount = 0;
 156   4                                              S2State = FALSE;
 157   4                                      }
 158   3                              }
 159   2                      }
 160   1                      
 161   1                      
 162   1                      /* Read Potentiometer */
 163   1                      ADC_DelSig_1_StartConvert();
 164   1                      ADC_DelSig_1_IsEndConversion(ADC_DelSig_1_WAIT_FOR_RESULT);
 165   1                      PotValue = ADC_DelSig_1_GetResult16() >> 1;
 166   1              
 167   1              /* Limit and Filter Potentiometer value */
 168   1                      if(PotValue < 5)
 169   1                      {
 170   2                              PotValue = 5;
 171   2                      }
 172   1                      if(PotValue > 205)
 173   1                      {
 174   2                              PotValue = 205;
 175   2                      }
 176   1              
 177   1              
C51 COMPILER V9.51   USERINTERFACE                                                         05/22/2017 14:27:57 PAGE 4   

 178   1                      TimerValue++;
 179   1                      
 180   1                      
 181   1                      if(S1Pressed)
 182   1                      {
 183   2                              S1Pressed = FALSE;
 184   2                              if(S1NextState != MENU_IGNORE_INPUT)
 185   2                              {       
 186   3                                      MenuState = S1NextState;
 187   3                              }
 188   2                      }
 189   1                      else if(S2Pressed)
 190   1                      {
 191   2                              S2Pressed = FALSE;
 192   2                              if(S2NextState != MENU_IGNORE_INPUT)
 193   2                              {       
 194   3                                      MenuState = S2NextState;
 195   3                              }
 196   2                      }
 197   1                      else if(PotValue != PotValuePrevious)
 198   1                      {
 199   2                              PotValuePrevious = PotValue;
 200   2                              if(PotNextState != MENU_IGNORE_INPUT)
 201   2                              {       
 202   3                                      MenuState = PotNextState;
 203   3                              } 
 204   2                      }
 205   1                      else if(TimerValue >= TimerThreshold)
 206   1                      {
 207   2                              TimerValue = 0;
 208   2                              if(TimerNextState != MENU_IGNORE_INPUT)
 209   2                              {       
 210   3                                      MenuState = TimerNextState;
 211   3                              } 
 212   2                      }
 213   1                      
 214   1                      
 215   1                      
 216   1                      switch(MenuState)
 217   1                      {
 218   2                              /* Placeholder case to use afer executing a do once menu case */
 219   2                              case MENU_IDLE:
 220   2                                      break;
 221   2                                      
 222   2                              /* Initial Menu page and Running page */
 223   2                              case MENU_READY:
 224   2                                      UI_Cmd.Run = 0;
 225   2                                      LCD_Position(0,0);
 226   2                      LCD_PrintString("Microstepper    ");
 227   2                                      LCD_Position(1,0);
 228   2                      LCD_PrintString("S1=Menu  S2=Run ");
 229   2                                      MenuState = MENU_IDLE;
 230   2                                      S1NextState = MENU_DIRECTION;
 231   2                                      S2NextState = MENU_RUN;
 232   2                                      PotNextState = MENU_IGNORE_INPUT;
 233   2                                      TimerNextState = MENU_IGNORE_INPUT;
 234   2                                      break;
 235   2                              case MENU_RUN:
 236   2                                      UI_Cmd.Run = 1;
 237   2                                      LCD_Position(0,0);
 238   2                                      LCD_PrintString("CMD=     Running");
 239   2                                      LCD_Position(1,0);
C51 COMPILER V9.51   USERINTERFACE                                                         05/22/2017 14:27:57 PAGE 5   

 240   2                                      LCD_PrintString("RPS=     S2=Stop");
 241   2                                      MenuState = MENU_RUN_UPDATE;
 242   2                                      S1NextState = MENU_IDLE;
 243   2                                      S2NextState = MENU_READY;
 244   2                                      TimerThreshold = 8;
 245   2                                      TimerNextState = MENU_RUN_UPDATE;
 246   2                                      break;
 247   2                              case MENU_RUN_UPDATE:
 248   2                                      SpeedFrq = (PotValue + 25);//;
 249   2                                      SpdRPS = (100000/(uint16)SpeedFrq) / (((uint16)128 * 200) / (uint16)UI_Data.MicroStepPace);
 250   2                                      LCD_Position(0,4);
 251   2                                      LCD_PrintString("     ");
 252   2                                      LCD_Position(0,4);
 253   2                                      LCD_PrintNumber(SpeedFrq);
 254   2                                      LCD_Position(1,4);
 255   2                                      LCD_PrintString("     ");
 256   2                                      LCD_Position(1,4);
 257   2                                      LCD_PrintNumber(SpdRPS);
 258   2                                      break;
 259   2                              
 260   2                              /* Rotation Direction menu page */
 261   2                              case MENU_DIRECTION:
 262   2                                      LCD_Position(0,0);
 263   2                                      LCD_PrintString("Direction       ");
 264   2                                      LCD_Position(1,0);
 265   2                                      LCD_PrintString("S1=Next  S2=Sel ");
 266   2                                      MenuState = MENU_IDLE;
 267   2                                      S1NextState = MENU_CURRENT;
 268   2                                      S2NextState = MENU_DIRECTION_SELECT;
 269   2                                      PotNextState = MENU_IGNORE_INPUT;
 270   2                                      break;
 271   2                              case MENU_DIRECTION_SELECT:
 272   2                                      LCD_Position(0,0);
 273   2                                      LCD_PrintString("Dir=            ");
 274   2                                      LCD_Position(1,0);
 275   2                                      LCD_PrintString("S1=Exit  S2=Set ");
 276   2                                      MenuState = MENU_DIRECTION_UPDATE;
 277   2                                      S2NextState = MENU_DIRECTION_SET;
 278   2                                      PotNextState = MENU_DIRECTION_UPDATE;
 279   2                                      break;  
 280   2                              case MENU_DIRECTION_UPDATE:
 281   2                                      LCD_Position(0,4);
 282   2                                      if(PotValue > 100)
 283   2                                      {
 284   3                                              LCD_PrintString("Forward");
 285   3                                              TempSetting = TRUE;
 286   3                                      }
 287   2                                      else
 288   2                                      {
 289   3                                              LCD_PrintString("Reverse");
 290   3                                              TempSetting = FALSE;
 291   3                                      }
 292   2                                      MenuState = MENU_IDLE;
 293   2                                      break;
 294   2                              case MENU_DIRECTION_SET:
 295   2                                              UI_Data.Dir = TempSetting;
 296   2                                              MenuState = MENU_CURRENT;
 297   2                                      break;
 298   2                              
 299   2                              /* Max Current menu page */
 300   2                              case MENU_CURRENT:
 301   2                                      LCD_Position(0,0);
C51 COMPILER V9.51   USERINTERFACE                                                         05/22/2017 14:27:57 PAGE 6   

 302   2                                      LCD_PrintString("Phase Current   ");
 303   2                                      LCD_Position(1,0);
 304   2                                      LCD_PrintString("S1=Next  S2=Sel ");
 305   2                                      MenuState = MENU_IDLE;
 306   2                                      S1NextState = MENU_STEPS;
 307   2                                      S2NextState = MENU_CURRENT_SELECT;
 308   2                                      PotNextState = MENU_IGNORE_INPUT;
 309   2                                      break;
 310   2                              case MENU_CURRENT_SELECT:
 311   2                                      LCD_Position(0,0);
 312   2                                      LCD_PrintString("Iphase=         ");
 313   2                                      LCD_Position(1,0);
 314   2                                      LCD_PrintString("S1=Exit  S2=Set ");
 315   2                                      MenuState = MENU_CURRENT_UPDATE;
 316   2                                      S2NextState = MENU_CURRENT_SET;
 317   2                                      PotNextState = MENU_CURRENT_UPDATE;
 318   2                                      break;  
 319   2                              case MENU_CURRENT_UPDATE:
 320   2                                      LCD_Position(0,7);
 321   2                                      if(PotValue < 66)
 322   2                                      {
 323   3                                              LCD_PrintString("1.0A");
 324   3                                              TempSetting = CURR_LOW;
 325   3                                      }
 326   2                                      else if(PotValue > 133)
 327   2                                      {
 328   3                                              LCD_PrintString("2.0A");
 329   3                                              TempSetting = CURR_HIGH;
 330   3                                      }
 331   2                                      else
 332   2                                      {
 333   3                                              LCD_PrintString("1.5A");
 334   3                                              TempSetting = CURR_MEDIUM;
 335   3                                      }
 336   2                                      MenuState = MENU_IDLE;
 337   2                                      break;
 338   2                              case MENU_CURRENT_SET:
 339   2                                      UI_Data.PhaseCurr = TempSetting;
 340   2                                      SetMaxCurr(TempSetting);
 341   2                                      MenuState = MENU_STEPS;
 342   2                                      break;
 343   2                      
 344   2                              /* Microsteppes menu page */
 345   2                              case MENU_STEPS:
 346   2                                      LCD_Position(0,0);
 347   2                                      LCD_PrintString("Micro Steps     ");
 348   2                                      LCD_Position(1,0);
 349   2                                      LCD_PrintString("S1=Next  S2=Sel ");
 350   2                                      MenuState = MENU_IDLE;
 351   2                                      S1NextState = MENU_DEFAULT;
 352   2                                      S2NextState = MENU_STEPS_SELECT;
 353   2                                      PotNextState = MENU_IGNORE_INPUT;
 354   2                                      break;
 355   2                              case MENU_STEPS_SELECT:
 356   2                                      LCD_Position(0,0);
 357   2                                      LCD_PrintString("uSteps=         ");
 358   2                                      LCD_Position(1,0);
 359   2                                      LCD_PrintString("S1=Exit  S2=Set ");
 360   2                                      MenuState = MENU_STEPS_UPDATE;
 361   2                                      S2NextState = MENU_STEPS_SET;
 362   2                                      PotNextState = MENU_STEPS_UPDATE;
 363   2                                      break;  
C51 COMPILER V9.51   USERINTERFACE                                                         05/22/2017 14:27:57 PAGE 7   

 364   2                              case MENU_STEPS_UPDATE:
 365   2                                      LCD_Position(0,7);
 366   2                                      if(PotValue < 40)
 367   2                                      {
 368   3                                              LCD_PrintString("Full");
 369   3                                              TempSetting = 128;
 370   3                                              Sm.MicroStepDivider = 1;
 371   3                                      }
 372   2                                      else if(PotValue < 80)
 373   2                                      {
 374   3                                              LCD_PrintString("4   ");
 375   3                                              TempSetting = 32;
 376   3                                              Sm.MicroStepDivider = 8;
 377   3                                      }
 378   2                                      else if(PotValue < 120)
 379   2                                      {
 380   3                                              LCD_PrintString("16  ");
 381   3                                              TempSetting = 8;
 382   3                                              Sm.MicroStepDivider = 32;
 383   3                                      }
 384   2                                      else if(PotValue < 160)
 385   2                                      {
 386   3                                              LCD_PrintString("32  ");
 387   3                                              TempSetting = 4;
 388   3                                              Sm.MicroStepDivider = 64;
 389   3                                      }
 390   2                                      else
 391   2                                      {
 392   3                                              LCD_PrintString("128 ");
 393   3                                              TempSetting = 1;
 394   3                                              Sm.MicroStepDivider = 129;
 395   3                                      }
 396   2                                      MenuState = MENU_IDLE;
 397   2                                      break;
 398   2                              case MENU_STEPS_SET:
 399   2                                      UI_Data.MicroStepPace = TempSetting;
 400   2                                      SpeedFrq = 150;         /* Prepare for re-starting with slow speed */
 401   2                      Timer_1_WritePeriod(SpeedFrq);
 402   2                                      MenuState = MENU_DEFAULT;
 403   2                                      break;
 404   2      
 405   2                                              
 406   2                              /* Reset Defaults menu page */
 407   2                              case MENU_DEFAULT:
 408   2                                      LCD_Position(0,0);
 409   2                                      LCD_PrintString("Reset Defaults  ");
 410   2                                      LCD_Position(1,0);
 411   2                                      LCD_PrintString("S1=Next S2=RESET");
 412   2                                      MenuState = MENU_IDLE;
 413   2                                      S1NextState = MENU_READY;
 414   2                                      S2NextState = MENU_DEFAULT_SET;
 415   2                                      PotNextState = MENU_IGNORE_INPUT;
 416   2                                      break;
 417   2                              case MENU_DEFAULT_SET:
 418   2                                      /* reset all variables */
 419   2                                      UI_Data.Dir = TRUE;
 420   2                                      UI_Data.MicroStepPace =16;
 421   2                                      UI_Data.PhaseCurr = 16;
 422   2                                      PGA_1_SetGain(PGA_1_GAIN_32); /*Medium current level*/
 423   2                              PGA_2_SetGain(PGA_1_GAIN_32);
 424   2                                      MenuState = MENU_READY;
 425   2                                      break;
C51 COMPILER V9.51   USERINTERFACE                                                         05/22/2017 14:27:57 PAGE 8   

 426   2                       
 427   2                              default: 
 428   2                                      break;
 429   2                      }   //End switch
 430   1      }
 431          
 432          
 433          
 434          
 435          
 436          
 437          
 438          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1510    ----
   CONSTANT SIZE    =    300    ----
   XDATA SIZE       =     25    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
